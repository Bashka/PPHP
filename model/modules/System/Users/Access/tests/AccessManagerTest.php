<?php
namespace PPHP\model\modules\System\Users\Access\tests;

spl_autoload_register(function($className){
  require_once $_SERVER['DOCUMENT_ROOT'] . '/' . str_replace('\\', '/', $className) . '.php';
});

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-08-18 at 07:48:27.
 * Тест непосредственно взаимодействует с БД и использует таблицы Users, Roles, Rules, UserRole и RoleRule.
 * Тест непосредственно использует класс \PPHP\services\database\identification\Autoincrement, что может привести к нарушению работы счетчика.
 * Нежелательно проводить данный тест не с тестовой БД.
 */
class AccessManagerTest extends \PHPUnit_Framework_TestCase{
  /**
   * @var \PPHP\model\modules\System\Users\Access\AccessManager
   */
  static protected $object;


  /**
   * @var \PPHP\tests\tools\classes\standard\storage\database\MockDataMapper
   */
  static protected $dataMapper;

  public static function setUpBeforeClass(){
    parent::setUpBeforeClass();

    self::$object = \PPHP\model\modules\System\Users\Access\AccessManager::getInstance();
    self::$dataMapper = new \PPHP\tests\tools\classes\standard\storage\database\MockDataMapper;
    $essenceManager = \PPHP\model\modules\System\Users\Access\EssenceManager::getInstance();
    $essenceManager->setDataMapper(self::$dataMapper);
    self::$object->setEssenceManager($essenceManager);
  }

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp(){
    self::$dataMapper->reset();
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown(){
  }

  /**
   * @covers PPHP\model\modules\System\Users\Access\AccessManager::hasRestriction
   */
  public function testHasRestriction(){
    $user = \PPHP\model\modules\System\Users\User::getProxy(1);

    $select = new \PPHP\tools\patterns\database\query\Select();
    $select->addTable(new \PPHP\tools\patterns\database\query\Table('Table'));
    $select->addField(new \PPHP\tools\patterns\database\query\Field('Field'));
    $rules = new \PPHP\tools\patterns\database\associations\LongAssociation($select, \PPHP\model\modules\System\Users\Access\LinkageRoleRule::getReflectionClass());
    $rule = \PPHP\model\modules\System\Users\Access\Rule::getProxy(3);
    $role = \PPHP\model\modules\System\Users\Access\Role::getProxy(2);
    $linkRoleRule = new \PPHP\model\modules\System\Users\Access\LinkageRoleRule;
    $linkRoleRule->setRole($role);
    $linkRoleRule->setRule($rule);
    $rules->attach($linkRoleRule);
    $linkUserRole = new \PPHP\model\modules\System\Users\Access\LinkageUserRole;
    $linkUserRole->setUser($user);
    $linkUserRole->setRole($role);


    self::$dataMapper->setReturns([[$linkUserRole], ['OID' => 2, 'rules' => $rules, 'name' => 'test'], [], ['module'=>'module','action'=>'action']]);

    $this->assertEquals(true, self::$object->hasRestriction($user, 'module', 'action'));

    $this->assertEquals('recoverGroupFinding(PPHP\model\modules\System\Users\Access\LinkageUserRole,[user=$/PPHP/model/modules/System/Users/User:1])', self::$dataMapper->getCommand(0));
    $this->assertEquals('recover(PPHP\model\modules\System\Users\Access\Role[name=,rules=,OID=2])', self::$dataMapper->getCommand(1));
    $this->assertEquals('recoverAssoc(PPHP\model\modules\System\Users\Access\LinkageRoleRule,SELECT `Field` FROM `Table`)', self::$dataMapper->getCommand(2));
    $this->assertEquals('recover(PPHP\model\modules\System\Users\Access\Rule[module=,action=,OID=3])', self::$dataMapper->getCommand(3));
  }

  /**
   * @covers PPHP\model\modules\System\Users\Access\AccessManager::hasRestriction
   */
  public function testHasRestrictionIfAccessResolved(){
    $user = \PPHP\model\modules\System\Users\User::getProxy(1);

    $select = new \PPHP\tools\patterns\database\query\Select();
    $select->addTable(new \PPHP\tools\patterns\database\query\Table('Table'));
    $select->addField(new \PPHP\tools\patterns\database\query\Field('Field'));
    $rules = new \PPHP\tools\patterns\database\associations\LongAssociation($select, \PPHP\model\modules\System\Users\Access\LinkageRoleRule::getReflectionClass());
    $rule = \PPHP\model\modules\System\Users\Access\Rule::getProxy(3);
    $role = \PPHP\model\modules\System\Users\Access\Role::getProxy(2);
    $linkRoleRule = new \PPHP\model\modules\System\Users\Access\LinkageRoleRule;
    $linkRoleRule->setRole($role);
    $linkRoleRule->setRule($rule);
    $rules->attach($linkRoleRule);
    $linkUserRole = new \PPHP\model\modules\System\Users\Access\LinkageUserRole;
    $linkUserRole->setUser($user);
    $linkUserRole->setRole($role);


    self::$dataMapper->setReturns([[$linkUserRole], ['OID' => 2, 'rules' => $rules, 'name' => 'test'], [], ['module'=>'module','action'=>'action']]);

    $this->assertEquals(false, self::$object->hasRestriction($user, 'module', 'action2'));

    $this->assertEquals('recoverGroupFinding(PPHP\model\modules\System\Users\Access\LinkageUserRole,[user=$/PPHP/model/modules/System/Users/User:1])', self::$dataMapper->getCommand(0));
    $this->assertEquals('recover(PPHP\model\modules\System\Users\Access\Role[name=,rules=,OID=2])', self::$dataMapper->getCommand(1));
    $this->assertEquals('recoverAssoc(PPHP\model\modules\System\Users\Access\LinkageRoleRule,SELECT `Field` FROM `Table`)', self::$dataMapper->getCommand(2));
    $this->assertEquals('recover(PPHP\model\modules\System\Users\Access\Rule[module=,action=,OID=3])', self::$dataMapper->getCommand(3));
  }
}
<?php
namespace PPHP\model\modules\System\Users\Access\tests;

spl_autoload_register(function($className){
  require_once $_SERVER['DOCUMENT_ROOT'] . '/' . str_replace('\\', '/', $className) . '.php';
});

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-09-08 at 09:05:31.
 */
class EssenceManagerTest extends \PHPUnit_Framework_TestCase{
  /**
   * @var \PPHP\model\modules\System\Users\Access\EssenceManager
   */
  static protected $object;

  /**
   * @var \PPHP\tests\tools\classes\standard\storage\database\MockDataMapper
   */
  static protected $dataMapper;

  public static function setUpBeforeClass(){
    parent::setUpBeforeClass();

    self::$object = \PPHP\model\modules\System\Users\Access\EssenceManager::getInstance();
    self::$dataMapper = new \PPHP\tests\tools\classes\standard\storage\database\MockDataMapper;
    self::$object->setDataMapper(self::$dataMapper);
  }

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp(){
    self::$dataMapper->reset();
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown(){
  }

  /**
   * @covers PPHP\model\modules\System\Users\Access\EssenceManager::getRolesUser
   */
  public function testGetRolesUser(){
    $user = \PPHP\model\modules\System\Users\User::getProxy(1);

    $role = \PPHP\model\modules\System\Users\Access\Role::getProxy(2);
    $link = new \PPHP\model\modules\System\Users\Access\LinkageUserRole;
    $link->setUser($user);
    $link->setRole($role);

    self::$dataMapper->setReturns([[$link]]);
    $roles = self::$object->getRolesUser($user);
    $this->assertEquals('recoverGroupFinding(PPHP\model\modules\System\Users\Access\LinkageUserRole,[user=$/PPHP/model/modules/System/Users/User:1])', self::$dataMapper->getCommand(0));
    $this->assertEquals($role, $roles->current());
  }

  /**
   * @covers PPHP\model\modules\System\Users\Access\EssenceManager::getRolesUser
   */
  public function testGetRolesDefaultUser(){
    $user = new \PPHP\model\modules\System\Users\DefaultUser;

    self::$object->getRolesUser($user);
    $this->assertEquals('recoverFinding(PPHP\model\modules\System\Users\Access\Role[name=,rules=,OID=],[name=Default user role])', self::$dataMapper->getCommand(0));
  }

  /**
   * @covers PPHP\model\modules\System\Users\Access\EssenceManager::addLinkageUserRole
   */
  public function testAddLinkageUserRole(){
    $role = \PPHP\model\modules\System\Users\Access\Role::getProxy(1);
    $user = \PPHP\model\modules\System\Users\User::getProxy(2);

    self::$dataMapper->setReturns([[]]);

    self::$object->addLinkageUserRole($user, $role);
    $this->assertEquals('recoverGroupFinding(PPHP\model\modules\System\Users\Access\LinkageUserRole,[user=$/PPHP/model/modules/System/Users/User:2])', self::$dataMapper->getCommand(0));
    $this->assertEquals('insert(PPHP\model\modules\System\Users\Access\LinkageUserRole[user=$/PPHP/model/modules/System/Users/User:2,role=$/PPHP/model/modules/System/Users/Access/Role:1,OID=])', self::$dataMapper->getCommand(1));
  }

  /**
   * @covers PPHP\model\modules\System\Users\Access\EssenceManager::addLinkageUserRole
   */
  public function testAddDuplicateLinkageUserRole(){
    $role = \PPHP\model\modules\System\Users\Access\Role::getProxy(1);
    $user = \PPHP\model\modules\System\Users\User::getProxy(2);

    $link = new \PPHP\model\modules\System\Users\Access\LinkageUserRole;
    $link->setUser($user);
    $link->setRole($role);
    self::$dataMapper->setReturns([[$link]]);

    $this->setExpectedException('\PPHP\tools\classes\standard\baseType\exceptions\DuplicationException');
    self::$object->addLinkageUserRole($user, $role);
    $this->assertEquals('recoverGroupFinding(PPHP\model\modules\System\Users\Access\LinkageUserRole,[user=$/PPHP/model/modules/System/Users/User:2])', self::$dataMapper->getCommand(0));
  }

  /**
   * @covers PPHP\model\modules\System\Users\Access\EssenceManager::removeLinkageUserRole
   */
  public function testRemoveLinkageUserRole(){
    $role = \PPHP\model\modules\System\Users\Access\Role::getProxy(1);
    $user = \PPHP\model\modules\System\Users\User::getProxy(2);

    self::$object->removeLinkageUserRole($user, $role);
    $this->assertEquals('recoverFinding(PPHP\model\modules\System\Users\Access\LinkageUserRole[user=,role=,OID=],[user=$/PPHP/model/modules/System/Users/User:2,role=$/PPHP/model/modules/System/Users/Access/Role:1])', self::$dataMapper->getCommand(0));
    $this->assertEquals('delete(PPHP\model\modules\System\Users\Access\LinkageUserRole[user=,role=,OID=])', self::$dataMapper->getCommand(1));
  }

  /**
   * @covers PPHP\model\modules\System\Users\Access\EssenceManager::removeLinkageUserRole
   */
  public function testRemoveAbsentLinkageUserRole(){
    $role = \PPHP\model\modules\System\Users\Access\Role::getProxy(1);
    $user = \PPHP\model\modules\System\Users\User::getProxy(2);

    self::$dataMapper->setReturns([[], new \PPHP\tools\classes\standard\storage\database\UncertaintyException]);
    $this->setExpectedException('\PPHP\tools\classes\standard\baseType\exceptions\NotFoundDataException');
    self::$object->removeLinkageUserRole($user, $role);
    $this->assertEquals('recoverFinding(PPHP\model\modules\System\Users\Access\LinkageUserRole[user=,role=,OID=],[user=$/PPHP/model/modules/System/Users/User:2,role=$/PPHP/model/modules/System/Users/Access/Role:1])', self::$dataMapper->getCommand(0));
  }

  /**
   * @covers PPHP\model\modules\System\Users\Access\EssenceManager::addRole
   */
  public function testAddRole(){
    self::$dataMapper->setReturns([[], new \PPHP\tools\classes\standard\storage\database\UncertaintyException, 1]);

    $this->assertEquals(1, self::$object->addRole('test'));
    $this->assertEquals('recoverFinding(PPHP\model\modules\System\Users\Access\Role[name=,rules=,OID=],[name=test])', self::$dataMapper->getCommand(0));
    $this->assertEquals('insert(PPHP\model\modules\System\Users\Access\Role[name=test,rules=,OID=])', self::$dataMapper->getCommand(1));
  }

  /**
   * @covers PPHP\model\modules\System\Users\Access\EssenceManager::addRole
   */
  public function testAddDuplicateRole(){
    $this->setExpectedException('\PPHP\tools\classes\standard\baseType\exceptions\DuplicationException');
    self::$object->addRole('test');
    $this->assertEquals('recoverFinding(PPHP\model\modules\System\Users\Access\Role[name=,rules=,OID=],[name=test])', self::$dataMapper->getCommand(0));
  }

  /**
   * @covers PPHP\model\modules\System\Users\Access\EssenceManager::recoverRole
   */
  public function testRecoverRole(){
    self::$dataMapper->setReturns([new \PPHP\tools\classes\standard\storage\database\UncertaintyException]);
    $this->assertEquals(false, self::$object->recoverRole(1));
    $this->assertEquals('recover(PPHP\model\modules\System\Users\Access\Role[name=,rules=,OID=1])', self::$dataMapper->getCommand(0));
  }

  /**
   * @covers PPHP\model\modules\System\Users\Access\EssenceManager::recoverRoleFromName
   */
  public function testRecoverRoleFromName(){
    self::$dataMapper->setReturns([[], new \PPHP\tools\classes\standard\storage\database\UncertaintyException]);
    $this->assertEquals(false, self::$object->recoverRoleFromName('test'));
    $this->assertEquals('recoverFinding(PPHP\model\modules\System\Users\Access\Role[name=,rules=,OID=],[name=test])', self::$dataMapper->getCommand(0));

  }

  /**
   * @covers PPHP\model\modules\System\Users\Access\EssenceManager::getRulesRole
   */
  public function testGetRulesRole(){
    $select = new \PPHP\tools\patterns\database\query\Select();
    $select->addTable(new \PPHP\tools\patterns\database\query\Table('Table'));
    $select->addField(new \PPHP\tools\patterns\database\query\Field('Field'));
    $rules = new \PPHP\tools\patterns\database\associations\LongAssociation($select, \PPHP\model\modules\System\Users\Access\LinkageRoleRule::getReflectionClass());

    $role = new \PPHP\model\modules\System\Users\Access\Role;
    $role->restoreFromMemento(new \PPHP\tools\patterns\memento\Memento($role, ['rules'=>$rules]));

    $linkRule = \PPHP\model\modules\System\Users\Access\LinkageRoleRule::getProxy(2);
    $rule = \PPHP\model\modules\System\Users\Access\Rule::getProxy(3);
    $linkRule->setRule($rule);
    self::$dataMapper->setReturns([[$linkRule]]);
    $return = self::$object->getRulesRole($role);
    $this->assertEquals('recoverAssoc(PPHP\model\modules\System\Users\Access\LinkageRoleRule,SELECT `Field` FROM `Table`)', self::$dataMapper->getCommand(0));
    $this->assertEquals($rule, $return->current());
  }

  /**
   * @covers PPHP\model\modules\System\Users\Access\EssenceManager::deleteRole
   */
  public function testDeleteRole(){
    $role = \PPHP\model\modules\System\Users\Access\Role::getProxy(1);
    $rule = \PPHP\model\modules\System\Users\Access\Rule::getProxy(2);

    $linkRule = new \PPHP\model\modules\System\Users\Access\LinkageRoleRule;
    $linkRule->setRole($role);
    $linkRule->setRule($rule);

    $select = new \PPHP\tools\patterns\database\query\Select();
    $select->addTable(new \PPHP\tools\patterns\database\query\Table('Table'));
    $select->addField(new \PPHP\tools\patterns\database\query\Field('Field'));
    $assoc = new \PPHP\tools\patterns\database\associations\LongAssociation($select, \PPHP\model\modules\System\Users\Access\LinkageRoleRule::getReflectionClass());

    $role->restoreFromMemento(new \PPHP\tools\patterns\memento\Memento($role, ['OID'=>1,'rules'=>$assoc]));

    self::$dataMapper->setReturns([[$linkRule]]);

    self::$object->deleteRole($role);
    $this->assertEquals('recoverAssoc(PPHP\model\modules\System\Users\Access\LinkageRoleRule,SELECT `Field` FROM `Table`)', self::$dataMapper->getCommand(0));
    $this->assertEquals('delete(PPHP\model\modules\System\Users\Access\LinkageRoleRule[role=$/PPHP/model/modules/System/Users/Access/Role:1,rule=$/PPHP/model/modules/System/Users/Access/Rule:2,OID=])', self::$dataMapper->getCommand(1));
    $this->assertEquals('delete(PPHP\model\modules\System\Users\Access\Role[name=,rules=LongAssociation,OID=1])', self::$dataMapper->getCommand(2));
  }

  /**
   * @covers PPHP\model\modules\System\Users\Access\EssenceManager::renameRole
   */
  public function testRenameRole(){
    $role = \PPHP\model\modules\System\Users\Access\Role::getProxy(1);
    self::$object->renameRole($role, 'test');
    $this->assertEquals('update(PPHP\model\modules\System\Users\Access\Role[name=test,rules=,OID=1])', self::$dataMapper->getCommand(0));
    $this->assertEquals('test', $role->getName());
  }

  /**
   * @covers PPHP\model\modules\System\Users\Access\EssenceManager::addLinkageRoleRule
   */
  public function testAddLinkageRoleRule(){
    $role = \PPHP\model\modules\System\Users\Access\Role::getProxy(1);
    $rule = \PPHP\model\modules\System\Users\Access\Rule::getProxy(2);

    $select = new \PPHP\tools\patterns\database\query\Select();
    $select->addTable(new \PPHP\tools\patterns\database\query\Table('Table'));
    $select->addField(new \PPHP\tools\patterns\database\query\Field('Field'));
    $rules = new \PPHP\tools\patterns\database\associations\LongAssociation($select, \PPHP\model\modules\System\Users\Access\LinkageRoleRule::getReflectionClass());

    self::$dataMapper->setReturns([['OID'=>1,'name'=>'test','rules'=>$rules],[]]);

    self::$object->addLinkageRoleRule($role, $rule);
    $this->assertEquals('recover(PPHP\model\modules\System\Users\Access\Role[name=,rules=,OID=1])', self::$dataMapper->getCommand(0));
    $this->assertEquals('recoverAssoc(PPHP\model\modules\System\Users\Access\LinkageRoleRule,SELECT `Field` FROM `Table`)', self::$dataMapper->getCommand(1));
    $this->assertEquals('insert(PPHP\model\modules\System\Users\Access\LinkageRoleRule[role=$/PPHP/model/modules/System/Users/Access/Role:1,rule=$/PPHP/model/modules/System/Users/Access/Rule:2,OID=])', self::$dataMapper->getCommand(2));
  }

  /**
   * @covers PPHP\model\modules\System\Users\Access\EssenceManager::addLinkageRoleRule
   */
  public function testAddDuplicateLinkageRoleRule(){
    $role = \PPHP\model\modules\System\Users\Access\Role::getProxy(1);
    $rule = \PPHP\model\modules\System\Users\Access\Rule::getProxy(2);

    $select = new \PPHP\tools\patterns\database\query\Select();
    $select->addTable(new \PPHP\tools\patterns\database\query\Table('Table'));
    $select->addField(new \PPHP\tools\patterns\database\query\Field('Field'));
    $rules = new \PPHP\tools\patterns\database\associations\LongAssociation($select, \PPHP\model\modules\System\Users\Access\LinkageRoleRule::getReflectionClass());
    $linkRoleRule = new \PPHP\model\modules\System\Users\Access\LinkageRoleRule;
    $linkRoleRule->setRole($role);
    $linkRoleRule->setRule($rule);
    $rules->attach($linkRoleRule);

    self::$dataMapper->setReturns([['OID'=>1,'name'=>'test','rules'=>$rules],[]]);

    $this->setExpectedException('\PPHP\tools\classes\standard\baseType\exceptions\DuplicationException');
    self::$object->addLinkageRoleRule($role, $rule);
    $this->assertEquals('recover(PPHP\model\modules\System\Users\Access\Role[name=,rules=,OID=1])', self::$dataMapper->getCommand(0));
    $this->assertEquals('recoverAssoc(PPHP\model\modules\System\Users\Access\LinkageRoleRule,SELECT `Field` FROM `Table`)', self::$dataMapper->getCommand(1));

  }

  /**
   * @covers PPHP\model\modules\System\Users\Access\EssenceManager::removeLinkageRoleRule
   */
  public function testRemoveLinkageRoleRule(){
    $role = \PPHP\model\modules\System\Users\Access\Role::getProxy(1);
    $rule = \PPHP\model\modules\System\Users\Access\Rule::getProxy(2);

    self::$object->removeLinkageRoleRule($role, $rule);
    $this->assertEquals('recoverFinding(PPHP\model\modules\System\Users\Access\LinkageRoleRule[role=,rule=,OID=],[rule=$/PPHP/model/modules/System/Users/Access/Rule:2,role=$/PPHP/model/modules/System/Users/Access/Role:1])', self::$dataMapper->getCommand(0));
    $this->assertEquals('delete(PPHP\model\modules\System\Users\Access\LinkageRoleRule[role=,rule=,OID=])', self::$dataMapper->getCommand(1));
  }

  /**
   * @covers PPHP\model\modules\System\Users\Access\EssenceManager::removeLinkageRoleRule
   */
  public function testRemoveAbsentLinkageRoleRule(){
    $role = \PPHP\model\modules\System\Users\Access\Role::getProxy(1);
    $rule = \PPHP\model\modules\System\Users\Access\Rule::getProxy(2);

    self::$dataMapper->setReturns([[], new \PPHP\tools\classes\standard\storage\database\UncertaintyException]);
    $this->setExpectedException('\PPHP\tools\classes\standard\baseType\exceptions\NotFoundDataException');
    self::$object->removeLinkageRoleRule($role, $rule);
    $this->assertEquals('recoverFinding(PPHP\model\modules\System\Users\Access\LinkageRoleRule[role=,rule=,OID=],[rule=$/PPHP/model/modules/System/Users/Access/Rule:2,role=$/PPHP/model/modules/System/Users/Access/Role:1])', self::$dataMapper->getCommand(0));
  }

  /**
   * @covers PPHP\model\modules\System\Users\Access\EssenceManager::recoverRule
   */
  public function testRecoverRule(){
    self::$dataMapper->setReturns([['module'=>'module', 'action'=>'action', 'OID'=>1]]);
    $rule = self::$object->recoverRule(1);
    $this->assertEquals('recover(PPHP\model\modules\System\Users\Access\Rule[module=,action=,OID=1])', self::$dataMapper->getCommand(0));
    $this->assertEquals('module', $rule->getModule());
    $this->assertEquals('action', $rule->getAction());
    $this->assertEquals(1, $rule->getOID());
  }

  /**
   * @covers PPHP\model\modules\System\Users\Access\EssenceManager::recoverRule
   */
  public function testRecoverAbsentRule(){
    self::$dataMapper->setReturns([new \PPHP\tools\classes\standard\storage\database\UncertaintyException]);
    $this->assertEquals(false, self::$object->recoverRule(1));
    $this->assertEquals('recover(PPHP\model\modules\System\Users\Access\Rule[module=,action=,OID=1])', self::$dataMapper->getCommand(0));
  }

  /**
   * @covers PPHP\model\modules\System\Users\Access\EssenceManager::recoverRuleFromPurpose
   */
  public function testRecoverRuleFromPurpose(){
    self::$dataMapper->setReturns([['module'=>'module', 'action'=>'action', 'OID'=>1]]);
    $role = self::$object->recoverRuleFromPurpose('module', 'action');
    $this->assertEquals('recoverFinding(PPHP\model\modules\System\Users\Access\Rule[module=,action=,OID=],[module=module,action=action])', self::$dataMapper->getCommand(0));
    $this->assertEquals('module', $role->getModule());
    $this->assertEquals('action', $role->getAction());
    $this->assertEquals(1, $role->getOID());
  }

  /**
   * @covers PPHP\model\modules\System\Users\Access\EssenceManager::recoverRuleFromPurpose
   */
  public function testRecoverAbsentRuleFromPurpose(){
    self::$dataMapper->setReturns([[], new \PPHP\tools\classes\standard\storage\database\UncertaintyException]);
    $this->assertEquals(false, self::$object->recoverRuleFromPurpose('module', 'action'));
    $this->assertEquals('recoverFinding(PPHP\model\modules\System\Users\Access\Rule[module=,action=,OID=],[module=module,action=action])', self::$dataMapper->getCommand(0));
  }

  /**
   * @covers PPHP\model\modules\System\Users\Access\EssenceManager::addRule
   */
  public function testAddRule(){
    self::$dataMapper->setReturns([[], new \PPHP\tools\classes\standard\storage\database\UncertaintyException, 1]);

    $this->assertEquals(1, self::$object->addRule('module', 'action'));
    $this->assertEquals('recoverFinding(PPHP\model\modules\System\Users\Access\Rule[module=,action=,OID=],[module=module,action=action])', self::$dataMapper->getCommand(0));
    $this->assertEquals('insert(PPHP\model\modules\System\Users\Access\Rule[module=module,action=action,OID=])', self::$dataMapper->getCommand(1));
  }

  /**
   * @covers PPHP\model\modules\System\Users\Access\EssenceManager::addRule
   */
  public function testAddDuplicateRule(){
    self::$dataMapper->setReturns([[], 1, 1]);

    $this->setExpectedException('\PPHP\tools\classes\standard\baseType\exceptions\DuplicationException');
    $this->assertEquals(1, self::$object->addRule('module', 'action'));
    $this->assertEquals('recoverFinding(PPHP\model\modules\System\Users\Access\Rule[module=,action=,OID=],[module=module,action=action])', self::$dataMapper->getCommand(0));
  }

  /**
   * @covers PPHP\model\modules\System\Users\Access\EssenceManager::deleteRule
   */
  public function testDeleteRule(){
    $rule = \PPHP\model\modules\System\Users\Access\Rule::getProxy(1);
    $role = \PPHP\model\modules\System\Users\Access\Role::getProxy(2);
    $res = new \SplObjectStorage;
    $link = new \PPHP\model\modules\System\Users\Access\LinkageRoleRule;
    $link->setRule($rule);
    $link->setRole($role);
    $res->attach($link);
    self::$dataMapper->setReturns([$res]);

    self::$object->deleteRule($rule);
    $this->assertEquals('recoverGroupFinding(PPHP\model\modules\System\Users\Access\LinkageRoleRule,[rule=$/PPHP/model/modules/System/Users/Access/Rule:1])', self::$dataMapper->getCommand(0));
    $this->assertEquals('delete(PPHP\model\modules\System\Users\Access\LinkageRoleRule[role=$/PPHP/model/modules/System/Users/Access/Role:2,rule=$/PPHP/model/modules/System/Users/Access/Rule:1,OID=])', self::$dataMapper->getCommand(1));
    $this->assertEquals('delete(PPHP\model\modules\System\Users\Access\Rule[module=,action=,OID=1])', self::$dataMapper->getCommand(2));
  }
}
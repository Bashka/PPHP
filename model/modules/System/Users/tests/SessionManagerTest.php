<?php
namespace PPHP\model\modules\System\Users\tests;
spl_autoload_register(function($className){
  require_once $_SERVER['DOCUMENT_ROOT'] . '/' . str_replace('\\', '/', $className) . '.php';
});

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-07-31 at 21:45:13.
 */
class SessionManagerTest extends \PHPUnit_Framework_TestCase{
  /**
   * @var \PPHP\model\modules\System\Users\SessionManager
   */
  protected $object;

  /**
   * @var MockDataMapper
   */
  protected $dataMapper;

  /**
   * @var MockSessionProvider
   */
  protected $sessionProvider;

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp(){
    $this->object = \PPHP\model\modules\System\Users\SessionManager::getInstance();

    $this->dataMapper = new MockDataMapper();
    $this->dataMapper->restart();

    $authManager = \PPHP\tools\classes\standard\essence\access\authenticated\AuthenticationManager::getInstance();
    $authManager->setDataMapper($this->dataMapper);
    $this->object->setAuthManager($authManager);

    $this->sessionProvider = MockSessionProvider::getInstance();
    $this->sessionProvider->destroy();
    $this->object->setSessionProvider($this->sessionProvider);
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown(){
  }

  /**
   * @covers PPHP\model\modules\System\Users\SessionManager::identify
   */
  public function testIdentify(){
    $user = $this->object->identify();
    $this->assertInstanceOf('\PPHP\model\modules\System\Users\DefaultUser', $user);
    $this->sessionProvider->set('\PPHP\model\modules\System\Users\SessionManager::OID', 1);
    $user = $this->object->identify();
    $this->assertEquals(1, $user->getOID());
  }

  /**
   * @covers PPHP\model\modules\System\Users\SessionManager::authenticate
   */
  public function testAuthenticate(){
    $user = $this->object->authenticate(1, 'pass');

    $this->assertEquals(1, $user->getOID());
    $this->assertEquals('pass', $user->getPassword());

    $sessionStorage = $this->sessionProvider->getStorage();
    $this->assertEquals(1, $sessionStorage['\PPHP\model\modules\System\Users\SessionManager::OID']);

    $this->assertEquals(1, $this->dataMapper->getOID());
    $this->assertEquals('pass', $this->dataMapper->getPass());
  }

  /**
   * @covers PPHP\model\modules\System\Users\SessionManager::authenticate
   */
  public function testAuthenticateIfNotFound(){
    $this->setExpectedException('\PPHP\tools\classes\standard\essence\access\authenticated\AuthentifyException');
    $this->object->authenticate(1, 'invalidPass');
  }

  /**
   * @covers PPHP\model\modules\System\Users\SessionManager::closeSession
   */
  public function testCloseSession(){
    $this->sessionProvider->set('\PPHP\model\modules\System\Users\SessionManager::OID', 1);
    $this->assertTrue($this->object->closeSession());
    $this->assertFalse($this->sessionProvider->isExists('\PPHP\model\modules\System\Users\SessionManager::OID'));
  }

  /**
   * @covers PPHP\model\modules\System\Users\SessionManager::register
   */
  public function testRegister(){
    $user = $this->object->register('newPass');
    $this->assertEquals(1, $this->dataMapper->getOID());
    $this->assertEquals('newPass', $this->dataMapper->getPass());
    $this->assertEquals(1, $user->getOID());
  }
}
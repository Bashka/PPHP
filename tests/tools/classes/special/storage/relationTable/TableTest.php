<?php
namespace PPHP\tests\tools\classes\special\storage\relationTable;

spl_autoload_register(function($className){
  require_once $_SERVER['DOCUMENT_ROOT'] . '/' . str_replace('\\', '/', $className) . '.php';
});

class TestStorage{
  private $data = [];
  private $i = 0;

  public function set($data){
    $this->data[$this->i++] = $data;
  }

  public function get(){
    return $this->data[$this->i++];
  }

  public function setI($i){
    $this->i = $i;
  }

  public function getI(){
    return $this->i;
  }

  public function clear(){
    $this->data = [];
    $this->i = 0;
  }
}

class TestWriter implements \PPHP\tools\patterns\io\Writer, \PPHP\tools\patterns\io\SeekIO{
  private $storage;

  function __construct(TestStorage $storage){
    $this->storage = $storage;
  }


  /**
   * Метод устанавливает указатель символа на указанную позицию.
   * @param integer $position Позиция символа.
   * @return boolean true - если позиция установлена, иначе - false.
   */
  public function setPosition($position){
    $this->storage->setI($position);
  }

  /**
   * Метод возвращает текущую позицию указателя символа.
   * @return integer
   */
  public function getPosition(){
    $this->storage->getI();
  }

  /**
   * Метод записывает строку в поток.
   * @param string $data Записываемая строка.
   * @return integer Число реально записанных байт.
   */
  public function write($data){
    $this->storage->set($data);
  }
}

class TestReader implements \PPHP\tools\patterns\io\Reader, \PPHP\tools\patterns\io\SeekIO{
  private $storage;

  function __construct(TestStorage $storage){
    $this->storage = $storage;
  }


  /**
   * Метод устанавливает указатель символа на указанную позицию.
   * @param integer $position Позиция символа.
   * @return boolean true - если позиция установлена, иначе - false.
   */
  public function setPosition($position){
    $this->storage->setI($position);
  }

  /**
   * Метод возвращает текущую позицию указателя символа.
   * @return integer
   */
  public function getPosition(){
    $this->storage->getI();
  }

  /**
   * Метод считывает один символ из потока.
   * @return string|boolean Возвращает текущий символ из потока или false, если поток закончет.
   */
  public function read(){
    return $this->storage->get();
  }


}

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-06-16 at 19:37:18.
 */
class TableTest extends \PHPUnit_Framework_TestCase{
  /**
   * @var \PPHP\tools\classes\special\storage\relationTable\Table
   */
  protected $object;

  /**
   * @var \PPHP\tools\tests\classes\special\storage\relationTable\TestStorage
   */
  protected $storage;

  /**
   * @var \PPHP\tools\tests\classes\special\storage\relationTable\TestWriter
   */
  protected $writer;

  /**
   * @var \PPHP\tools\tests\classes\special\storage\relationTable\TestReader
   */
  protected $reader;

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp(){
    $structure = new \PPHP\tools\classes\special\storage\relationTable\Structure();
    $structure->addField(new TestField('field1'));
    $structure->addField(new TestField('field2'));
    $structure->addField(new TestField('field3'));
    $pointer = new \PPHP\tools\classes\special\storage\relationTable\Pointer(0, 1);
    $this->object = new \PPHP\tools\classes\special\storage\relationTable\Table($structure, $pointer);
    $this->storage = new TestStorage();
    $this->reader = new TestReader($this->storage);
    $this->writer = new TestWriter($this->storage);
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown(){
  }

  /**
   * @covers PPHP\tools\classes\special\storage\relationTable\Table::Select
   */
  public function testSelect(){
    $this->writer->write('1');
    $this->writer->write('2');
    $this->writer->write('3');
    $this->assertEquals(['field1' => 1, 'field2' => 2, 'field3' => 3], $this->object->select(1, $this->reader));
  }

  /**
   * @covers PPHP\tools\classes\special\storage\relationTable\Table::update
   */
  public function testUpdate(){
    $this->object->update(1, $this->writer, ['field1' => 1, 'field2' => 2, 'field3' => 3]);
    $this->storage->setI(0);
    $this->assertEquals('1', $this->storage->get());
    $this->assertEquals('2', $this->storage->get());
    $this->assertEquals('3', $this->storage->get());
  }

  /**
   * @covers PPHP\tools\classes\special\storage\relationTable\Table::update
   */
  public function testUpdateRewrite(){
    $this->writer->write('1');
    $this->writer->write('2');
    $this->writer->write('3');
    $this->object->update(1, $this->writer, ['field1' => 4, 'field2' => 5, 'field3' => 6]);
    $this->storage->setI(0);
    $this->assertEquals('4', $this->storage->get());
    $this->assertEquals('5', $this->storage->get());
    $this->assertEquals('6', $this->storage->get());
  }

  /**
   * @covers PPHP\tools\classes\special\storage\relationTable\Table::delete
   */
  public function testDelete(){
    $this->writer->write('1');
    $this->writer->write('2');
    $this->writer->write('3');
    $this->object->delete(1, $this->writer);
    $this->storage->setI(0);
    $this->assertEquals(' ', $this->storage->get());
    $this->assertEquals(' ', $this->storage->get());
    $this->assertEquals(' ', $this->storage->get());
    $this->assertEquals(null, $this->object->select(1, $this->reader));
  }
}

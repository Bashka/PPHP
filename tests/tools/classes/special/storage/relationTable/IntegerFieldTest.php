<?php
namespace PPHP\tests\tools\classes\special\storage\relationTable;

spl_autoload_register(function($className){
  require_once $_SERVER['DOCUMENT_ROOT'] . '/' . str_replace('\\', '/', $className) . '.php';
});
/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-06-16 at 06:34:48.
 */
class IntegerFieldTest extends \PHPUnit_Framework_TestCase{
  /**
   * @var \PPHP\tools\classes\special\storage\relationTable\IntegerField
   */
  protected $object;

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp(){
    $this->object = new \PPHP\tools\classes\special\storage\relationTable\IntegerField('test', 3);
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown(){
  }

  /**
   * @covers PPHP\tools\classes\special\storage\relationTable\IntegerField::verify
   */
  public function testVerify(){
    $this->assertTrue($this->object->verify(100));
  }

  /**
   * @covers PPHP\tools\classes\special\storage\relationTable\IntegerField::verify
   */
  public function testVerifyIfBadSize(){
    $this->assertFalse($this->object->verify(1000));
  }

  /**
   * @covers PPHP\tools\classes\special\storage\relationTable\IntegerField::verify
   */
  public function testVerifyIfNullGiven(){
    $this->assertTrue($this->object->verify());
    $this->assertFalse($this->object->verify(''));
    $this->object = new \PPHP\tools\classes\special\storage\relationTable\IntegerField('test', 3, true);
    $this->assertFalse($this->object->verify());
    $this->assertFalse($this->object->verify(''));
  }

  /**
   * @covers PPHP\tools\classes\special\storage\relationTable\IntegerField::verify
   */
  public function testVerifyDefault(){
    $this->object = new \PPHP\tools\classes\special\storage\relationTable\IntegerField('test', 3, false, 100);
    $this->assertTrue($this->object->verify());
    $this->assertFalse($this->object->verify(''));
  }

  /**
   * @covers PPHP\tools\classes\special\storage\relationTable\IntegerField::verify
   */
  public function testVerifyIfNullGivenAndDefault(){
    $this->object = new \PPHP\tools\classes\special\storage\relationTable\IntegerField('test', 3, true, 100);
    $this->assertTrue($this->object->verify());
    $this->assertFalse($this->object->verify(''));
  }

  /**
   * @covers PPHP\tools\classes\special\storage\relationTable\IntegerField::serializeData
   */
  public function testSerializeData(){
    $this->assertEquals('  1', $this->object->serializeData(1));
  }

  /**
   * @covers PPHP\tools\classes\special\storage\relationTable\IntegerField::serializeData
   */
  public function testSerializeDataDefault(){
    $this->object = new \PPHP\tools\classes\special\storage\relationTable\IntegerField('test', 3, false, 10);
    $this->assertEquals(' 10', $this->object->serializeData());
  }

  /**
   * @covers PPHP\tools\classes\special\storage\relationTable\IntegerField::serializeData
   */
  public function testSerializeDataIfNullGiven(){
    $this->assertEquals('   ', $this->object->serializeData());
  }

  /**
   * @covers PPHP\tools\classes\special\storage\relationTable\IntegerField::unserializeData
   */
  public function testUnserializeData(){
    $this->assertEquals(1, $this->object->unserializeData('  1'));
  }

  /**
   * @covers PPHP\tools\classes\special\storage\relationTable\IntegerField::getSizeData
   */
  public function testGetSizeData(){
    $this->assertEquals(3, $this->object->getSizeData());
  }
}

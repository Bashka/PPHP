<?php
namespace PPHP\tests\tools\classes\special\storage\relationTable;

spl_autoload_register(function($className){
  require_once $_SERVER['DOCUMENT_ROOT'] . '/' . str_replace('\\', '/', $className) . '.php';
});
/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-06-16 at 06:42:41.
 */
class DateTimeFieldTest extends \PHPUnit_Framework_TestCase{
  /**
   * @var \PPHP\tools\classes\special\storage\relationTable\DateTimeField
   */
  protected $object;

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp(){
    $this->object = new \PPHP\tools\classes\special\storage\relationTable\DateTimeField('test');
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown(){
  }

  /**
   * @covers PPHP\tools\classes\special\storage\relationTable\DateTimeField::verify
   */
  public function testVerify(){
    $date = new \DateTime('2012-06-16');
    $this->assertTrue($this->object->verify($date));
  }

  /**
   * @covers PPHP\tools\classes\special\storage\relationTable\DateTimeField::verify
   */
  public function testVerifyIfNullGiven(){
    $this->assertTrue($this->object->verify());
    $this->assertFalse($this->object->verify(''));
    $this->object = new \PPHP\tools\classes\special\storage\relationTable\DateTimeField('test', true);
    $this->assertFalse($this->object->verify());
  }

  /**
   * @covers PPHP\tools\classes\special\storage\relationTable\DateTimeField::verify
   */
  public function testVerifyDefault(){
    $date = new \DateTime('2012-06-16');
    $this->object = new \PPHP\tools\classes\special\storage\relationTable\DateTimeField('test', false, $date);
    $this->assertTrue($this->object->verify());
    $this->assertFalse($this->object->verify(''));
  }

  /**
   * @covers PPHP\tools\classes\special\storage\relationTable\DateTimeField::verify
   */
  public function testVerifyIfNullGivenAndDefault(){
    $date = new \DateTime('2012-06-16');
    $this->object = new \PPHP\tools\classes\special\storage\relationTable\DateTimeField('test', true, $date);
    $this->assertTrue($this->object->verify());
    $this->assertFalse($this->object->verify(''));
  }

  /**
   * @covers PPHP\tools\classes\special\storage\relationTable\DateTimeField::serializeData
   */
  public function testSerializeData(){
    $date = new \DateTime('2012-06-16');
    $this->assertEquals('       2012-06-16 00:00:00', $this->object->serializeData($date));
  }

  /**
   * @covers PPHP\tools\classes\special\storage\relationTable\DateTimeField::serializeData
   */
  public function testSerializeDataDefault(){
    $date = new \DateTime('2012-06-16');
    $this->object = new \PPHP\tools\classes\special\storage\relationTable\DateTimeField('test', false, $date);
    $this->assertEquals('       2012-06-16 00:00:00', $this->object->serializeData());
  }

  /**
   * @covers PPHP\tools\classes\special\storage\relationTable\DateTimeField::serializeData
   */
  public function testSerializeDataIfNullGiven(){
    $this->assertEquals('                          ', $this->object->serializeData());
  }

  /**
   * @covers PPHP\tools\classes\special\storage\relationTable\DateTimeField::unserializeData
   */
  public function testUnserializeData(){
    $this->assertInstanceOf('\DateTime', $this->object->unserializeData('       2012-06-16 00:00:00'));
    $this->assertEquals('2012-06-16', $this->object->unserializeData('       2012-06-16 00:00:00')->format('Y-m-d'));
  }

  /**
   * @covers PPHP\tools\classes\special\storage\relationTable\DateTimeField::getSizeData
   */
  public function testGetSizeData(){
    $this->assertEquals(26, $this->object->getSizeData());
  }
}

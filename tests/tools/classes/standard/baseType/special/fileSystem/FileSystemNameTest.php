<?php
namespace PPHP\tests\tools\classes\standard\baseType\special\fileSystem;
spl_autoload_register(function($className){
  require_once $_SERVER['DOCUMENT_ROOT'] . '/' . str_replace('\\', '/', $className) . '.php';
});

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-10-11 at 05:03:04.
 */
class FileSystemNameTest extends \PHPUnit_Framework_TestCase{
  /**
   * @var \PPHP\tools\classes\standard\baseType\special\fileSystem\FileSystemName
   */
  protected $object;

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp(){
    $this->object = new \PPHP\tools\classes\standard\baseType\special\fileSystem\FileSystemName('test.Name.txt');
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown(){
  }

  /**
   * @covers PPHP\tools\classes\standard\baseType\special\fileSystem\FileSystemName::transform
   */
  public function testTransform(){
    $this->assertEquals('test.Name', $this->object->getName());
    $this->assertEquals('txt', $this->object->getExpansion());
  }

  /**
   * @covers PPHP\tools\classes\standard\baseType\special\fileSystem\FileSystemName::is
   */
  public function testIs(){
    $this->assertFalse(\PPHP\tools\classes\standard\baseType\special\fileSystem\FileSystemName::is(''));
    $this->assertTrue(\PPHP\tools\classes\standard\baseType\special\fileSystem\FileSystemName::is('a'));
    $this->assertTrue(\PPHP\tools\classes\standard\baseType\special\fileSystem\FileSystemName::is('a.b'));
    $this->assertTrue(\PPHP\tools\classes\standard\baseType\special\fileSystem\FileSystemName::is('1'));
    $this->assertTrue(\PPHP\tools\classes\standard\baseType\special\fileSystem\FileSystemName::is('1.2'));
    $this->assertTrue(\PPHP\tools\classes\standard\baseType\special\fileSystem\FileSystemName::is('.a.b'));
    $this->assertTrue(\PPHP\tools\classes\standard\baseType\special\fileSystem\FileSystemName::is('.a.1'));
    $this->assertTrue(\PPHP\tools\classes\standard\baseType\special\fileSystem\FileSystemName::is('a_b.a-b'));
    $this->assertFalse(\PPHP\tools\classes\standard\baseType\special\fileSystem\FileSystemName::is('<.a'));
    $this->assertFalse(\PPHP\tools\classes\standard\baseType\special\fileSystem\FileSystemName::is('>.a'));
    $this->assertFalse(\PPHP\tools\classes\standard\baseType\special\fileSystem\FileSystemName::is('|.a'));
    $this->assertFalse(\PPHP\tools\classes\standard\baseType\special\fileSystem\FileSystemName::is('\\.a'));
    $this->assertFalse(\PPHP\tools\classes\standard\baseType\special\fileSystem\FileSystemName::is('/.a'));
    $this->assertFalse(\PPHP\tools\classes\standard\baseType\special\fileSystem\FileSystemName::is(':.a'));
    $this->assertFalse(\PPHP\tools\classes\standard\baseType\special\fileSystem\FileSystemName::is('?.a'));
    $this->assertFalse(\PPHP\tools\classes\standard\baseType\special\fileSystem\FileSystemName::is('*.a'));
    $this->assertFalse(\PPHP\tools\classes\standard\baseType\special\fileSystem\FileSystemName::is('".a'));
    $this->assertFalse(\PPHP\tools\classes\standard\baseType\special\fileSystem\FileSystemName::is("a.b\0"));
  }
}

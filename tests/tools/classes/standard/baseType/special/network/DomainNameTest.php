<?php
namespace PPHP\tests\tools\classes\standard\baseType\special\network;

spl_autoload_register(function($className){
  require_once $_SERVER['DOCUMENT_ROOT'] . '/' . str_replace('\\', '/', $className) . '.php';
});
/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-10-12 at 20:57:08.
 */
class DomainNameTest extends \PHPUnit_Framework_TestCase{
  /**
   * @var \PPHP\tools\classes\standard\baseType\special\network\DomainName
   */
  protected $object;

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp(){
    $this->object = new \PPHP\tools\classes\standard\baseType\special\network\DomainName('test.domain1.na-me.r-u');
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown(){
  }

  /**
   * @covers PPHP\tools\classes\standard\baseType\special\network\DomainName::is
   */
  public function testIs(){
    $this->assertFalse(\PPHP\tools\classes\standard\baseType\special\network\DomainName::is(''));
    $this->assertFalse(\PPHP\tools\classes\standard\baseType\special\network\DomainName::is('a'));
    $this->assertFalse(\PPHP\tools\classes\standard\baseType\special\network\DomainName::is('1'));
    $this->assertTrue(\PPHP\tools\classes\standard\baseType\special\network\DomainName::is('ab'));
    $this->assertTrue(\PPHP\tools\classes\standard\baseType\special\network\DomainName::is('1a'));
    $this->assertTrue(\PPHP\tools\classes\standard\baseType\special\network\DomainName::is('a1'));
    $this->assertTrue(\PPHP\tools\classes\standard\baseType\special\network\DomainName::is('11'));
    $this->assertTrue(\PPHP\tools\classes\standard\baseType\special\network\DomainName::is('a-b'));
    $this->assertFalse(\PPHP\tools\classes\standard\baseType\special\network\DomainName::is('a--'));
    $this->assertTrue(\PPHP\tools\classes\standard\baseType\special\network\DomainName::is('a.b'));
    $this->assertFalse(\PPHP\tools\classes\standard\baseType\special\network\DomainName::is('a.'));
    $this->assertFalse(\PPHP\tools\classes\standard\baseType\special\network\DomainName::is('.a'));
    $this->assertTrue(\PPHP\tools\classes\standard\baseType\special\network\DomainName::is('a.1'));
    $this->assertTrue(\PPHP\tools\classes\standard\baseType\special\network\DomainName::is('a-.b'));
    $this->assertTrue(\PPHP\tools\classes\standard\baseType\special\network\DomainName::is('test.com'));
    $this->assertTrue(\PPHP\tools\classes\standard\baseType\special\network\DomainName::is('sub.domain.com'));
    $this->assertFalse(\PPHP\tools\classes\standard\baseType\special\network\DomainName::is('-a.1'));
    $this->assertFalse(\PPHP\tools\classes\standard\baseType\special\network\DomainName::is('a_.b'));
  }

  /**
   * @covers PPHP\tools\classes\standard\baseType\special\network\DomainName::getComponent
   */
  public function testGetComponent(){
    $this->assertEquals('r-u', $this->object->getComponent(0));
    $this->assertEquals('na-me', $this->object->getComponent(1));
    $this->assertEquals('domain1', $this->object->getComponent(2));
    $this->assertEquals('test', $this->object->getComponent(3));
  }
}

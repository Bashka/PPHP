<?php
namespace PPHP\tests\tools\classes\standard\baseType;

spl_autoload_register(function($className){
  require_once $_SERVER['DOCUMENT_ROOT'] . '/' . str_replace('\\', '/', $className) . '.php';
});

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-10-10 at 08:24:58.
 */
class IntegerTest extends \PHPUnit_Framework_TestCase{
  /**
   * @var \PPHP\tools\classes\standard\baseType\Integer
   */
  protected $object;

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp(){
    $this->object = new \PPHP\tools\classes\standard\baseType\Integer(12345);
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown(){
  }

  /**
   * @covers PPHP\tools\classes\standard\baseType\Integer::is
   */
  public function testIs(){
    $this->assertTrue(\PPHP\tools\classes\standard\baseType\Integer::is(10));
    $this->assertTrue(\PPHP\tools\classes\standard\baseType\Integer::is(-10));
    $this->assertTrue(\PPHP\tools\classes\standard\baseType\Integer::is(1.0));
    $this->assertTrue(\PPHP\tools\classes\standard\baseType\Integer::is(-1.0));
    $this->assertFalse(\PPHP\tools\classes\standard\baseType\Integer::is(1.5));
    $this->assertFalse(\PPHP\tools\classes\standard\baseType\Integer::is(-1.5));
    $this->assertTrue(\PPHP\tools\classes\standard\baseType\Integer::is(true));
    $this->assertTrue(\PPHP\tools\classes\standard\baseType\Integer::is(false));
    $this->assertTrue(\PPHP\tools\classes\standard\baseType\Integer::is('5'));
    $this->assertTrue(\PPHP\tools\classes\standard\baseType\Integer::is('-5'));
    $this->assertTrue(\PPHP\tools\classes\standard\baseType\Integer::is('1.0'));
    $this->assertTrue(\PPHP\tools\classes\standard\baseType\Integer::is('-1.0'));
    $this->assertFalse(\PPHP\tools\classes\standard\baseType\Integer::is('1.5'));
    $this->assertFalse(\PPHP\tools\classes\standard\baseType\Integer::is('-1.5'));
    $this->assertFalse(\PPHP\tools\classes\standard\baseType\Integer::is('5a'));
    $this->assertFalse(\PPHP\tools\classes\standard\baseType\Integer::is('1.0a'));
    $this->assertFalse(\PPHP\tools\classes\standard\baseType\Integer::is('1.5a'));
  }

  /**
   * @covers PPHP\tools\classes\standard\baseType\Integer::getVal
   */
  public function testGetVal(){
    $this->assertEquals(12345, $this->object->getVal());
  }

  /**
   * @covers PPHP\tools\classes\standard\baseType\Integer::isEven
   */
  public function testIsEven(){
    $this->assertFalse($this->object->isEven());
  }

  /**
   * @covers PPHP\tools\classes\standard\baseType\Integer::count
   */
  public function testCount(){
    $this->assertEquals(5, $this->object->count());
    $negativeInt = new \PPHP\tools\classes\standard\baseType\Integer(-12345);
    $this->assertEquals(5, $negativeInt->count());
  }

  /**
   * @covers PPHP\tools\classes\standard\baseType\Integer::verify
   */
  public function testVerify(){
    $this->assertTrue($this->object->verify());
    $this->assertTrue($this->object->verify(0));
    $this->assertFalse($this->object->verify(12346));
    $this->assertTrue($this->object->verify(null, 12346));
    $this->assertFalse($this->object->verify(null, 12344));
    $this->assertTrue($this->object->verify(0, 12346));
    $this->assertTrue($this->object->verify(null, null, 5));
    $this->assertFalse($this->object->verify(null, null, 4));
    $this->assertTrue($this->object->verify(0, 12346, 5));
  }

  /**
   * @covers PPHP\tools\classes\standard\baseType\Integer::prevent
   */
  public function testPrevent(){
    $this->assertEquals(12345, $this->object->prevent(0, 12345)->getVal());
    $this->assertEquals(12346, $this->object->prevent(12346)->getVal());
    $this->assertEquals(1000, $this->object->prevent(null, 1000)->getVal());
  }
}

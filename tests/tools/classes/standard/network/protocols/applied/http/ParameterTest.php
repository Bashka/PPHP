<?php
namespace PPHP\tests\tools\classes\standard\network\protocols\applied\http;

spl_autoload_register(function($className){
  require_once $_SERVER['DOCUMENT_ROOT'] . '/' . str_replace('\\', '/', $className) . '.php';
});
/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-12-14 at 14:30:58.
 */
class ParameterTest extends \PHPUnit_Framework_TestCase{
  /**
   * @var \PPHP\tools\classes\standard\network\protocols\applied\http\Parameter
   */
  protected $object;

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp(){
    $this->object = new \PPHP\tools\classes\standard\network\protocols\applied\http\Parameter('name', 'value');
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown(){
  }

  /**
   * @covers PPHP\tools\classes\standard\network\protocols\applied\http\Parameter::reestablish
   */
  public function testReestablish(){
    $param = \PPHP\tools\classes\standard\network\protocols\applied\http\Parameter::reestablish('name:value');
    $this->assertEquals('name', $param->getName());
    $this->assertEquals('value', $param->getValue());

    $param = \PPHP\tools\classes\standard\network\protocols\applied\http\Parameter::reestablish('name:  value');
    $this->assertEquals('name', $param->getName());
    $this->assertEquals('value', $param->getValue());

    $param = \PPHP\tools\classes\standard\network\protocols\applied\http\Parameter::reestablish('name:');
    $this->assertEquals('name', $param->getName());
    $this->assertEquals('', $param->getValue());

    $param = \PPHP\tools\classes\standard\network\protocols\applied\http\Parameter::reestablish(':value');
    $this->assertEquals('', $param->getName());
    $this->assertEquals('value', $param->getValue());

    $param = \PPHP\tools\classes\standard\network\protocols\applied\http\Parameter::reestablish(':');
    $this->assertEquals('', $param->getName());
    $this->assertEquals('', $param->getValue());

    $this->setExpectedException('\PPHP\tools\classes\standard\baseType\exceptions\NotFoundDataException');
    \PPHP\tools\classes\standard\network\protocols\applied\http\Parameter::reestablish('name');
  }

  /**
   * @covers PPHP\tools\classes\standard\network\protocols\applied\http\Parameter::interpretation
   */
  public function testInterpretation(){
    $this->assertEquals('name:value', $this->object->interpretation());
  }

  /**
   * @covers PPHP\tools\classes\standard\network\protocols\applied\http\Parameter::getName
   */
  public function testGetName(){
    $this->assertEquals('name', $this->object->getName());
  }

  /**
   * @covers PPHP\tools\classes\standard\network\protocols\applied\http\Parameter::getValue
   */
  public function testGetValue(){
    $this->assertEquals('value', $this->object->getValue());
  }
}

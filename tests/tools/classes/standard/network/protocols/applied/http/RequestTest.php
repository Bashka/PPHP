<?php
namespace PPHP\tests\tools\classes\standard\network\protocols\applied\http;

spl_autoload_register(function($className){
  require_once $_SERVER['DOCUMENT_ROOT'] . '/' . str_replace('\\', '/', $className) . '.php';
});
/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-12-14 at 20:26:22.
 */
class RequestTest extends \PHPUnit_Framework_TestCase{
  /**
   * @var \PPHP\tools\classes\standard\network\protocols\applied\http\Request
   */
  protected $object;

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp(){
    $this->object = new \PPHP\tools\classes\standard\network\protocols\applied\http\Request('localhost', '/index.html');
    $this->object->addParameterHeaderStr('nameA', 'valueA');
    $this->object->addParameterHeaderStr('nameB', 'valueB');
    $this->object->setBody('test body');
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown(){
  }

  /**
   * @covers PPHP\tools\classes\standard\network\protocols\applied\http\Request::reestablish
   */
  public function testReestablish(){
    $request = \PPHP\tools\classes\standard\network\protocols\applied\http\Request::reestablish('GET /index.html HTTP/1.1' . PHP_EOL . 'Content-Type:text/html' . PHP_EOL . 'Content-Length:4' . PHP_EOL . 'Host:localhost' . PHP_EOL . PHP_EOL . 'test');
    $this->assertEquals(null, $request->getBody());
    $this->assertEquals('GET', $request->getMethod());
    $this->assertEquals('/index.html', $request->getURI());
    $this->assertEquals('text/html', $request->getHeader()->getParameterValue('Content-Type'));

    $request = \PPHP\tools\classes\standard\network\protocols\applied\http\Request::reestablish('GET /index.html HTTP/1.1' . PHP_EOL  . 'Host:localhost' . PHP_EOL . PHP_EOL);
    $this->assertEquals('GET', $request->getMethod());
    $this->assertEquals('/index.html', $request->getURI());
    $this->assertEquals('localhost', $request->getHeader()->getParameterValue('Host'));

    $request = \PPHP\tools\classes\standard\network\protocols\applied\http\Request::reestablish('GET /index.html?name=value HTTP/1.1' . PHP_EOL  . 'Host:localhost' . PHP_EOL . PHP_EOL);
    $this->assertEquals('/index.html?name=value', $request->getURI());

    $request = \PPHP\tools\classes\standard\network\protocols\applied\http\Request::reestablish('POST / HTTP/1.1' . PHP_EOL  . 'Host:localhost' . PHP_EOL . PHP_EOL);
    $this->assertEquals('POST', $request->getMethod());
    $this->assertEquals('/', $request->getURI());
    $this->assertEquals(null, $request->getBody());

    $request = \PPHP\tools\classes\standard\network\protocols\applied\http\Request::reestablish('POST /index.html HTTP/1.1' . PHP_EOL . 'Content-Type:text/html' . PHP_EOL . 'Content-Length:8' . PHP_EOL . 'Host:localhost' . PHP_EOL . PHP_EOL . 'тест');
    $this->assertEquals('тест', $request->getBody());

    $this->setExpectedException('\PPHP\tools\classes\standard\baseType\exceptions\NotFoundDataException');
    \PPHP\tools\classes\standard\network\protocols\applied\http\Request::reestablish('GET /index.html HTTP/1.1' . PHP_EOL  . 'Host:localhost' . PHP_EOL);
    $this->setExpectedException('\PPHP\tools\classes\standard\baseType\exceptions\NotFoundDataException');
    \PPHP\tools\classes\standard\network\protocols\applied\http\Request::reestablish('GET /index.html HTTP/1.1' . PHP_EOL  . PHP_EOL);
    $this->setExpectedException('\PPHP\tools\classes\standard\baseType\exceptions\NotFoundDataException');
    \PPHP\tools\classes\standard\network\protocols\applied\http\Request::reestablish('GET /index.html' . PHP_EOL  . 'Host:localhost' . PHP_EOL . PHP_EOL);
    $this->setExpectedException('\PPHP\tools\classes\standard\baseType\exceptions\NotFoundDataException');
    \PPHP\tools\classes\standard\network\protocols\applied\http\Request::reestablish('GET HTTP/1.1' . PHP_EOL  . 'Host:localhost' . PHP_EOL . PHP_EOL);
    $this->setExpectedException('\PPHP\tools\classes\standard\baseType\exceptions\NotFoundDataException');
    \PPHP\tools\classes\standard\network\protocols\applied\http\Request::reestablish('/index.html HTTP/1.1' . PHP_EOL  . 'Host:localhost' . PHP_EOL . PHP_EOL);
    $this->setExpectedException('\PPHP\tools\classes\standard\baseType\exceptions\NotFoundDataException');
    \PPHP\tools\classes\standard\network\protocols\applied\http\Request::reestablish('GET /index.html HTTP/1.1' . PHP_EOL . 'Content-Type:text/html' . PHP_EOL . 'Content-Length:4' . PHP_EOL . 'Host:localhost' . PHP_EOL . PHP_EOL);
  }

  /**
   * @covers PPHP\tools\classes\standard\network\protocols\applied\http\Message::setHeader
   * @covers PPHP\tools\classes\standard\network\protocols\applied\http\Message::getHeader
   */
  public function testSetHeader(){
    $header = \PPHP\tools\classes\standard\network\protocols\applied\http\Header::reestablish('nameA:valueA'.PHP_EOL.'nameB:valueB'.PHP_EOL);
    $this->object->setHeader($header);
    $this->assertEquals($header, $this->object->getHeader());
    $this->assertEquals('nameA:valueA'.PHP_EOL.'nameB:valueB'.PHP_EOL, $header->interpretation());
  }

  /**
   * @covers PPHP\tools\classes\standard\network\protocols\applied\http\Message::addParameterHeader
   */
  public function testAddParameterHeader(){
    $this->object->addParameterHeader(new \PPHP\tools\classes\standard\network\protocols\applied\http\Parameter('nameC', 'valueC'));
    $this->assertEquals('valueC', $this->object->getHeader()->getParameterValue('nameC'));
  }

  /**
   * @covers PPHP\tools\classes\standard\network\protocols\applied\http\Message::addParameterHeaderStr
   */
  public function testAddParameterHeaderStr(){
    $this->object->addParameterHeaderStr('nameC', 'valueC');
    $this->assertEquals('valueC', $this->object->getHeader()->getParameterValue('nameC'));
  }

  /**
   * @covers PPHP\tools\classes\standard\network\protocols\applied\http\Message::setBody
   */
  public function testSetBody(){
    $this->object->setBody('new test');
    $this->assertEquals('new test', $this->object->getBody());
    $this->assertEquals('8', $this->object->getHeader()->getParameterValue('Content-Length'));

    $this->object->setBody('new test', 'text/json', 'windows-1251');
    $this->assertEquals('new test', $this->object->getBody());
    $this->assertEquals('8', $this->object->getHeader()->getParameterValue('Content-Length'));
    $this->assertEquals('text/html;charset=utf-8', $this->object->getHeader()->getParameterValue('Content-Type'));

    $this->object = new \PPHP\tools\classes\standard\network\protocols\applied\http\Request('localhost', '/index.html');
    $this->object->setBody('new test', 'text/json', 'windows-1251');
    $this->assertEquals('new test', $this->object->getBody());
    $this->assertEquals('8', $this->object->getHeader()->getParameterValue('Content-Length'));
    $this->assertEquals('text/json;charset=windows-1251', $this->object->getHeader()->getParameterValue('Content-Type'));

    $this->object->setBody('тест');
    $this->assertEquals('8', $this->object->getHeader()->getParameterValue('Content-Length'));
  }

  /**
   * @covers PPHP\tools\classes\standard\network\protocols\applied\http\Request::interpretation
   */
  public function testInterpretation(){
    $this->assertEquals('GET /index.html HTTP/1.1'.PHP_EOL.'Cache-Control:no-cache'.PHP_EOL.'Connection:close'.PHP_EOL.'Host:localhost'.PHP_EOL.'nameA:valueA' . PHP_EOL . 'nameB:valueB' . PHP_EOL.'Content-Type:text/html;charset=utf-8'.PHP_EOL.'Content-Length:9'.PHP_EOL.'Content-MD5:bbf9afe7431caf5f89a608bc31e8d822'.PHP_EOL.PHP_EOL.'test body', $this->object->interpretation());
    $request = new \PPHP\tools\classes\standard\network\protocols\applied\http\Request('localhost', '/index.html', 'GET', null, ['nameA' => 'valueA test', 'nameB' => 'valueB']);
    $this->assertEquals('GET /index.html?nameA=valueA+test&nameB=valueB HTTP/1.1'.PHP_EOL.'Cache-Control:no-cache'.PHP_EOL.'Connection:close'.PHP_EOL.'Host:localhost'.PHP_EOL.PHP_EOL, $request->interpretation());
  }

  /**
   * @covers PPHP\tools\classes\standard\network\protocols\applied\http\Message::getBody
   */
  public function testGetBody(){
    $this->assertEquals('test body', $this->object->getBody());
  }

  /**
   * @covers PPHP\tools\classes\standard\network\protocols\applied\http\Request::getMethod
   */
  public function testGetMethod(){
    $this->assertEquals('GET', $this->object->getMethod());
  }

  /**
   * @covers PPHP\tools\classes\standard\network\protocols\applied\http\Request::getURI
   */
  public function testGetURI(){
    $this->assertEquals('/index.html', $this->object->getURI());
  }
}

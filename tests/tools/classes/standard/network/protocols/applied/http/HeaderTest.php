<?php
namespace PPHP\tests\tools\classes\standard\network\protocols\applied\http;

spl_autoload_register(function($className){
  require_once $_SERVER['DOCUMENT_ROOT'] . '/' . str_replace('\\', '/', $className) . '.php';
});
/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-12-14 at 14:38:17.
 */
class HeaderTest extends \PHPUnit_Framework_TestCase{
  /**
   * @var \PPHP\tools\classes\standard\network\protocols\applied\http\Header
   */
  protected $object;

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp(){
    $this->object = new \PPHP\tools\classes\standard\network\protocols\applied\http\Header();
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown(){
  }

  /**
   * @covers PPHP\tools\classes\standard\network\protocols\applied\http\Header::reestablish
   */
  public function testReestablish(){
    $header = \PPHP\tools\classes\standard\network\protocols\applied\http\Header::reestablish('nameA:valueA'.PHP_EOL.'nameB:valueB'.PHP_EOL);
    $this->assertEquals('valueA', $header->getParameter('nameA')->getValue());
    $this->assertEquals('valueB', $header->getParameter('nameB')->getValue());

    $header = \PPHP\tools\classes\standard\network\protocols\applied\http\Header::reestablish('nameA:valueA'.PHP_EOL.'nameB:valueB');
    $this->assertEquals('valueA', $header->getParameter('nameA')->getValue());
    $this->assertEquals('valueB', $header->getParameter('nameB')->getValue());

    $header = \PPHP\tools\classes\standard\network\protocols\applied\http\Header::reestablish('nameA:valueA'.PHP_EOL);
    $this->assertEquals('valueA', $header->getParameter('nameA')->getValue());

    $header = \PPHP\tools\classes\standard\network\protocols\applied\http\Header::reestablish('nameA:valueA');
    $this->assertEquals('valueA', $header->getParameter('nameA')->getValue());

    $header = \PPHP\tools\classes\standard\network\protocols\applied\http\Header::reestablish(PHP_EOL.'nameA:valueA'.PHP_EOL.'nameB:valueB'.PHP_EOL);
    $this->assertEquals('valueA', $header->getParameter('nameA')->getValue());
    $this->assertEquals('valueB', $header->getParameter('nameB')->getValue());

    $header = \PPHP\tools\classes\standard\network\protocols\applied\http\Header::reestablish('');
    $this->assertEquals(PHP_EOL, $header->interpretation());
  }

  /**
   * @covers PPHP\tools\classes\standard\network\protocols\applied\http\Header::addParameter
   * @covers PPHP\tools\classes\standard\network\protocols\applied\http\Header::getParameter
   */
  public function testAddParameter(){
    $this->object->addParameter(new \PPHP\tools\classes\standard\network\protocols\applied\http\Parameter('name', 'value'));
    $this->assertEquals('value', $this->object->getParameter('name')->getValue());
  }

  /**
   * @covers PPHP\tools\classes\standard\network\protocols\applied\http\Header::addParameterStr
   */
  public function testAddParameterStr(){
    $this->object->addParameterStr('name', 'value');
    $this->assertEquals('value', $this->object->getParameter('name')->getValue());
  }

  /**
   * @covers PPHP\tools\classes\standard\network\protocols\applied\http\Header::hasParameter
   */
  public function testHasParameter(){
    $this->object->addParameterStr('name', 'value');
    $this->assertTrue($this->object->hasParameter('name'));
  }

  /**
   * @covers PPHP\tools\classes\standard\network\protocols\applied\http\Header::interpretation
   */
  public function testInterpretation(){
    $this->object->addParameterStr('nameA', 'valueA');
    $this->object->addParameterStr('nameB', 'valueB');
    $this->assertEquals('nameA:valueA'.PHP_EOL.'nameB:valueB'.PHP_EOL, $this->object->interpretation());
  }

  /**
   * @covers PPHP\tools\classes\standard\network\protocols\applied\http\Header::getParameters
   */
  public function testGetParameters(){
    $this->object->addParameterStr('nameA', 'valueA');
    $this->object->addParameterStr('nameB', 'valueB');
    $params = $this->object->getParameters();
    $this->assertEquals(2, count($params));
  }

  /**
   * @covers PPHP\tools\classes\standard\network\protocols\applied\http\Header::getParameterValue
   */
  public function testGetParameterValue(){
    $this->object->addParameterStr('nameA', 'valueA');
    $this->object->addParameterStr('nameB', 'valueB');
    $this->assertEquals('valueA', $this->object->getParameterValue('nameA'));
  }
}

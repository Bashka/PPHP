<?php
namespace PPHP\tests\tools\classes\standard\storage\database\queryCreator;
use PPHP\tests\tools\patterns\database\TestLongObject;
$_SERVER['DOCUMENT_ROOT'] = 'C:/WebServers/home/dic/www';
spl_autoload_register(function($className){
  require_once $_SERVER['DOCUMENT_ROOT'] . '/' . str_replace('\\', '/', $className) . '.php';
});

spl_autoload_register(function($className){
  require_once $_SERVER['DOCUMENT_ROOT'] . '/' . str_replace('\\', '/', $className) . '.php';
});

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-06-25 at 18:15:08.
 */
class IndividualQueryCreatorTest extends \PHPUnit_Framework_TestCase{
  /**
   * @var \PPHP\tools\classes\standard\storage\database\queryCreator\IndividualQueryCreator
   */
  protected $object;

  /**
   * @var PPHP\tools\tests\patterns\database\TestLongObject
   */
  static protected $longObject;

  /**
   * Тестовый сервис автоинкрементации.
   * @var TestAutoinc
   */
  static protected $autoinc;

  public static function setUpBeforeClass(){
    self::$longObject = new TestLongObject();
    self::$longObject->setOID(1);
    $fourProp = new TestLongObject();
    $fourProp->setOID(2);
    self::$longObject->setLinkProp($fourProp);
    self::$autoinc = TestAutoinc::getInstance();
  }

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp(){
    $this->object = new \PPHP\tools\classes\standard\storage\database\queryCreator\IndividualQueryCreator(self::$autoinc);
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown(){
  }

  /**
   * @covers \PPHP\tools\classes\standard\storage\database\queryCreator\IndividualQueryCreator::createSelectQuery
   */
  public function testCreateSelectQuery(){
    $this->assertEquals('SELECT `privField` as privProp,`protField` as protProp,`linkField` as linkProp,`parentProtField` as parentProtProp,`parentPublField` as parentPublProp FROM `ChildTable` INNER JOIN `ParentTable` ON (ChildTable.Key = ParentTable.Key) WHERE (ChildTable.Key = "1")', $this->object->createSelectQuery(self::$longObject)->interpretation());
  }

  /**
   * @covers \PPHP\tools\classes\standard\storage\database\queryCreator\IndividualQueryCreator::createSelectQuery
   */
  public function testCreateSelectQueryNonIdentified(){
    $longObject = new TestLongObject();
    $this->setExpectedException('PPHP\tools\patterns\database\identification\IncorrectOIDException');
    $this->object->createSelectQuery($longObject);
  }

  /**
   * @covers \PPHP\tools\classes\standard\storage\database\queryCreator\IndividualQueryCreator::createUpdateQuery
   * @covers \PPHP\tools\classes\standard\storage\database\queryCreator\IndividualQueryCreator::getPropertiesValues
   */
  public function testCreateUpdateQuery(){
    $updates = $this->object->createUpdateQuery(self::$longObject);
    $this->assertEquals('UPDATE `ChildTable` SET `privField` = "1",`protField` = "2",`linkField` = "$/PPHP/tests/tools/patterns/database/TestLongObject:2" WHERE (`Key` = "1")', array_shift($updates)->interpretation());
    $this->assertEquals('UPDATE `ParentTable` SET `parentProtField` = "2",`parentPublField` = "3" WHERE (`Key` = "1")', array_shift($updates)->interpretation());
  }

  /**
   * @covers \PPHP\tools\classes\standard\storage\database\queryCreator\IndividualQueryCreator::createUpdateQuery
   */
  public function testCreateUpdateQueryNonIdentified(){
    $longObject = new TestLongObject();
    $this->setExpectedException('PPHP\tools\patterns\database\identification\IncorrectOIDException');
    $this->object->createUpdateQuery($longObject);
  }

  /**
   * @covers \PPHP\tools\classes\standard\storage\database\queryCreator\IndividualQueryCreator::createDeleteQuery
   */
  public function testCreateDeleteQuery(){
    $deletes = $this->object->createDeleteQuery(self::$longObject);
    $this->assertEquals('DELETE FROM `ChildTable` WHERE (`Key` = "1")', array_shift($deletes)->interpretation());
    $this->assertEquals('DELETE FROM `ParentTable` WHERE (`Key` = "1")', array_shift($deletes)->interpretation());
  }

  /**
   * @covers \PPHP\tools\classes\standard\storage\database\queryCreator\IndividualQueryCreator::createDeleteQuery
   */
  public function testCreateDeleteQueryNonIdentified(){
    $longObject = new TestLongObject();
    $this->setExpectedException('PPHP\tools\patterns\database\identification\IncorrectOIDException');
    $this->object->createDeleteQuery($longObject);
  }

  /**
   * @covers \PPHP\tools\classes\standard\storage\database\queryCreator\IndividualQueryCreator::createInsertQuery
   */
  public function testCreateInsertQuery(){
    $longObject = new TestLongObject();
    $fourProp = new TestLongObject();
    $fourProp->setOID(2);
    $longObject->setLinkProp($fourProp);
    self::$autoinc->generateOID();
    $inserts = $this->object->createInsertQuery($longObject);
    $this->assertEquals('INSERT INTO `ChildTable` (`privField`,`protField`,`linkField`,`Key`) VALUES ("1","2","$/PPHP/tests/tools/patterns/database/TestLongObject:2","2")', array_shift($inserts)->interpretation());
    $this->assertEquals('INSERT INTO `ParentTable` (`parentProtField`,`parentPublField`,`Key`) VALUES ("2","3","2")', array_shift($inserts)->interpretation());
  }

  /**
   * @covers \PPHP\tools\classes\standard\storage\database\queryCreator\IndividualQueryCreator::createInsertQuery
   */
  public function testCreateInsertQueryIdentified(){
    $this->setExpectedException('PPHP\tools\patterns\database\identification\IncorrectOIDException');
    $this->object->createInsertQuery(self::$longObject);
  }
}

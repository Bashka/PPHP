<?php
namespace PPHP\tests\tools\classes\standard\storage\database;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-09-15 at 08:24:43.
 */
class EssenceManagerTest extends \PHPUnit_Framework_TestCase{
  /**
   * @var MockEssenceManager
   */
  protected $object;

  /**
   * @var \PPHP\tests\tools\classes\standard\storage\database\MockDataMapper
   */
  protected $dataMapper;

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp(){
    $this->object = MockEssenceManager::getInstance();
    $this->dataMapper = new \PPHP\tests\tools\classes\standard\storage\database\MockDataMapper;
    $this->object->setDataMapper($this->dataMapper);
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown(){
  }

  /**
   * @covers PPHP\tools\classes\standard\storage\database\EssenceManager::addEssence
   */
  public function testAddEssence(){
    $this->dataMapper->setReturns([1]);

    $essence = new \PPHP\tests\tools\patterns\database\TestLongObject;
    $this->assertEquals(1, $this->object->addEssence($essence));
    $this->assertEquals('insert(PPHP\tests\tools\patterns\database\TestLongObject[privProp=1,protProp=2,publProp=,linkProp=,parentProtProp=2,parentPublProp=3,OID=])', $this->dataMapper->getCommand(0));
  }

  /**
   * @covers PPHP\tools\classes\standard\storage\database\EssenceManager::removeEssence
   */
  public function testRemoveEssence(){
    $essence = new \PPHP\tests\tools\patterns\database\TestLongObject;
    $this->assertTrue($this->object->removeEssence($essence));
    $this->assertEquals('delete(PPHP\tests\tools\patterns\database\TestLongObject[privProp=1,protProp=2,publProp=,linkProp=,parentProtProp=2,parentPublProp=3,OID=])', $this->dataMapper->getCommand(0));
  }

  /**
   * @covers PPHP\tools\classes\standard\storage\database\EssenceManager::removeAssoc
   */
  public function testRemoveAssoc(){
    $select = new \PPHP\tools\patterns\database\query\Select();
    $select->addTable(new \PPHP\tools\patterns\database\query\Table('test'));
    $select->addField(new \PPHP\tools\patterns\database\query\Field('test'));

    $assoc = new \PPHP\tools\patterns\database\associations\LongAssociation($select, \PPHP\tests\tools\patterns\database\TestAssoc::getReflectionClass());
    $this->dataMapper->setReturns([[
      \PPHP\tests\tools\patterns\database\TestAssoc::getProxy(1),
      \PPHP\tests\tools\patterns\database\TestAssoc::getProxy(2)
    ]]);

    $this->assertTrue($this->object->removeAssoc($assoc));
    $this->assertEquals('recoverAssoc(PPHP\tests\tools\patterns\database\TestAssoc,SELECT `test` FROM `test`)', $this->dataMapper->getCommand(0));
    $this->assertEquals('delete(PPHP\tests\tools\patterns\database\TestAssoc[propOne=,propTwo=,OID=1])', $this->dataMapper->getCommand(1));
    $this->assertEquals('delete(PPHP\tests\tools\patterns\database\TestAssoc[propOne=,propTwo=,OID=2])', $this->dataMapper->getCommand(2));
  }

  /**
   * @covers PPHP\tools\classes\standard\storage\database\EssenceManager::compositeRemoval
   */
  public function testCompositeRemoval(){
    $select = new \PPHP\tools\patterns\database\query\Select();
    $select->addTable(new \PPHP\tools\patterns\database\query\Table('test'));
    $select->addField(new \PPHP\tools\patterns\database\query\Field('test'));

    $assoc = new \PPHP\tools\patterns\database\associations\LongAssociation($select, \PPHP\tests\tools\patterns\database\TestAssoc::getReflectionClass());

    $linkOne = \PPHP\tests\tools\patterns\database\TestAssoc::getProxy(1);
    $linkOne->setPropOne(\PPHP\tests\tools\patterns\database\TestLongObject::getProxy(2));
    $linkOne->setPropTwo(\PPHP\tests\tools\patterns\database\TestLongObject::getProxy(3));

    $linkTwo = \PPHP\tests\tools\patterns\database\TestAssoc::getProxy(4);
    $linkTwo->setPropOne(\PPHP\tests\tools\patterns\database\TestLongObject::getProxy(5));
    $linkTwo->setPropTwo(\PPHP\tests\tools\patterns\database\TestLongObject::getProxy(6));

    $this->dataMapper->setReturns([[
      $linkOne,
      $linkTwo
    ]]);

    $this->assertTrue($this->object->compositeRemoval($assoc, [\PPHP\tests\tools\patterns\database\TestAssoc::getReflectionMethod('getPropOne'), \PPHP\tests\tools\patterns\database\TestAssoc::getReflectionMethod('getPropTwo')]));
    $this->assertEquals('recoverAssoc(PPHP\tests\tools\patterns\database\TestAssoc,SELECT `test` FROM `test`)', $this->dataMapper->getCommand(0));

    $this->assertEquals('delete(PPHP\tests\tools\patterns\database\TestLongObject[privProp=1,protProp=2,publProp=,linkProp=,parentProtProp=2,parentPublProp=3,OID=2])', $this->dataMapper->getCommand(1));
    $this->assertEquals('delete(PPHP\tests\tools\patterns\database\TestLongObject[privProp=1,protProp=2,publProp=,linkProp=,parentProtProp=2,parentPublProp=3,OID=3])', $this->dataMapper->getCommand(2));
    $this->assertEquals('delete(PPHP\tests\tools\patterns\database\TestAssoc[propOne=$/PPHP/tests/tools/patterns/database/TestLongObject:2,propTwo=$/PPHP/tests/tools/patterns/database/TestLongObject:3,OID=1])', $this->dataMapper->getCommand(3));

    $this->assertEquals('delete(PPHP\tests\tools\patterns\database\TestLongObject[privProp=1,protProp=2,publProp=,linkProp=,parentProtProp=2,parentPublProp=3,OID=5])', $this->dataMapper->getCommand(4));
    $this->assertEquals('delete(PPHP\tests\tools\patterns\database\TestLongObject[privProp=1,protProp=2,publProp=,linkProp=,parentProtProp=2,parentPublProp=3,OID=6])', $this->dataMapper->getCommand(5));
    $this->assertEquals('delete(PPHP\tests\tools\patterns\database\TestAssoc[propOne=$/PPHP/tests/tools/patterns/database/TestLongObject:5,propTwo=$/PPHP/tests/tools/patterns/database/TestLongObject:6,OID=4])', $this->dataMapper->getCommand(6));
  }

  /**
   * @covers PPHP\tools\classes\standard\storage\database\EssenceManager::findingRemoveAssoc
   */
  public function testFindingRemoveAssoc(){
    $essence = \PPHP\tests\tools\patterns\database\TestLongObject::getProxy(1);

    $links = new \SplObjectStorage();
    $links->attach(\PPHP\tests\tools\patterns\database\TestAssoc::getProxy(2));
    $links->attach(\PPHP\tests\tools\patterns\database\TestAssoc::getProxy(3));

    $this->dataMapper->setReturns([$links]);

    $reflectionKey = \PPHP\tests\tools\patterns\database\TestAssoc::getReflectionProperty('propOne');
    $this->assertTrue($this->object->findingRemoveAssoc(\PPHP\tests\tools\patterns\database\TestAssoc::getReflectionClass(), $reflectionKey, $essence));
    $this->assertEquals('recoverGroupFinding(PPHP\tests\tools\patterns\database\TestAssoc,['.$reflectionKey->getName().'='.$essence->getLinkOID().'])', $this->dataMapper->getCommand(0));
    $this->assertEquals('delete(PPHP\tests\tools\patterns\database\TestAssoc[propOne=,propTwo=,OID=2])', $this->dataMapper->getCommand(1));
    $this->assertEquals('delete(PPHP\tests\tools\patterns\database\TestAssoc[propOne=,propTwo=,OID=3])', $this->dataMapper->getCommand(2));
  }

  /**
   * @covers PPHP\tools\classes\standard\storage\database\EssenceManager::findingCompositeRemoval
   */
  public function testFindingCompositeRemoval(){
    $essence = \PPHP\tests\tools\patterns\database\TestLongObject::getProxy(1);

    $links = new \SplObjectStorage();
    $link = \PPHP\tests\tools\patterns\database\TestAssoc::getProxy(2);
    $link->setPropOne(\PPHP\tests\tools\patterns\database\TestLongObject::getProxy(3));
    $link->setPropTwo(\PPHP\tests\tools\patterns\database\TestLongObject::getProxy(4));
    $links->attach($link);

    $this->dataMapper->setReturns([$links]);

    $reflectionKey = \PPHP\tests\tools\patterns\database\TestAssoc::getReflectionProperty('propOne');
    $this->assertTrue($this->object->findingCompositeRemoval(\PPHP\tests\tools\patterns\database\TestAssoc::getReflectionClass(), $reflectionKey, $essence, [\PPHP\tests\tools\patterns\database\TestAssoc::getReflectionMethod('getPropOne'), \PPHP\tests\tools\patterns\database\TestAssoc::getReflectionMethod('getPropTwo')]));
    $this->assertEquals('recoverGroupFinding(PPHP\tests\tools\patterns\database\TestAssoc,['.$reflectionKey->getName().'='.$essence->getLinkOID().'])', $this->dataMapper->getCommand(0));
    $this->assertEquals('delete(PPHP\tests\tools\patterns\database\TestLongObject[privProp=1,protProp=2,publProp=,linkProp=,parentProtProp=2,parentPublProp=3,OID=3])', $this->dataMapper->getCommand(1));
    $this->assertEquals('delete(PPHP\tests\tools\patterns\database\TestLongObject[privProp=1,protProp=2,publProp=,linkProp=,parentProtProp=2,parentPublProp=3,OID=4])', $this->dataMapper->getCommand(2));
    $this->assertEquals('delete(PPHP\tests\tools\patterns\database\TestAssoc[propOne=$/PPHP/tests/tools/patterns/database/TestLongObject:3,propTwo=$/PPHP/tests/tools/patterns/database/TestLongObject:4,OID=2])', $this->dataMapper->getCommand(3));
  }

  /**
   * @covers PPHP\tools\classes\standard\storage\database\EssenceManager::updateEssence
   */
  public function testUpdateEssence(){
    $essence = new \PPHP\tests\tools\patterns\database\TestLongObject;
    $essence->setOID(1);
    $this->assertEquals(true, $this->object->updateEssence($essence));
    $this->assertEquals('update(PPHP\tests\tools\patterns\database\TestLongObject[privProp=1,protProp=2,publProp=,linkProp=,parentProtProp=2,parentPublProp=3,OID=1])', $this->dataMapper->getCommand(0));
  }

  /**
   * @covers PPHP\tools\classes\standard\storage\database\EssenceManager::recoverEssence
   */
  public function testRecoverEssence(){
    $essence = \PPHP\tests\tools\patterns\database\TestLongObject::getProxy(1);
    $this->object->recoverEssence($essence);
    $this->assertEquals('recover(PPHP\tests\tools\patterns\database\TestLongObject[privProp=1,protProp=2,publProp=,linkProp=,parentProtProp=2,parentPublProp=3,OID=1])', $this->dataMapper->getCommand(0));
  }

  /**
   * @covers PPHP\tools\classes\standard\storage\database\EssenceManager::findEssence
   */
  public function testFindEssence(){
    $essence = new \PPHP\tests\tools\patterns\database\TestLongObject;
    $this->object->findEssence($essence, ['privProp'=>1]);
    $this->assertEquals('recoverFinding(PPHP\tests\tools\patterns\database\TestLongObject[privProp=1,protProp=2,publProp=,linkProp=,parentProtProp=2,parentPublProp=3,OID=],[privProp=1])', $this->dataMapper->getCommand(0));
  }

  /**
   * @covers PPHP\tools\classes\standard\storage\database\EssenceManager::findEssences
   */
  public function testFindEssences(){
    $this->object->findEssences(\PPHP\tests\tools\patterns\database\TestLongObject::getReflectionClass(), ['privProp'=>1]);
    $this->assertEquals('recoverGroupFinding(PPHP\tests\tools\patterns\database\TestLongObject,[privProp=1])', $this->dataMapper->getCommand(0));
  }

  /**
   * @covers PPHP\tools\classes\standard\storage\database\EssenceManager::recoverComponents
   */
  public function testRecoverComponents(){
    $select = new \PPHP\tools\patterns\database\query\Select();
    $select->addTable(new \PPHP\tools\patterns\database\query\Table('test'));
    $select->addField(new \PPHP\tools\patterns\database\query\Field('test'));

    $assoc = new \PPHP\tools\patterns\database\associations\LongAssociation($select, \PPHP\tests\tools\patterns\database\TestAssoc::getReflectionClass());
    $link = \PPHP\tests\tools\patterns\database\TestAssoc::getProxy(1);
    $object = \PPHP\tests\tools\patterns\database\TestLongObject::getProxy(2);
    $link->setPropOne($object);
    $this->dataMapper->setReturns([[
      $link
    ]]);

    $links = $this->object->recoverComponents($assoc, \PPHP\tests\tools\patterns\database\TestAssoc::getReflectionMethod('getPropOne'));
    $this->assertEquals('recoverAssoc(PPHP\tests\tools\patterns\database\TestAssoc,SELECT `test` FROM `test`)', $this->dataMapper->getCommand(0));
    $this->assertEquals($links->current(), $object);
  }

  /**
   * @covers PPHP\tools\classes\standard\storage\database\EssenceManager::recoverFindAssoc
   */
  public function testRecoverFindAssoc(){
    $essence = \PPHP\tests\tools\patterns\database\TestLongObject::getProxy(1);

    $links = new \SplObjectStorage();
    $link = \PPHP\tests\tools\patterns\database\TestAssoc::getProxy(2);
    $links->attach($link);

    $this->dataMapper->setReturns([$links]);

    $reflectionKey = \PPHP\tests\tools\patterns\database\TestAssoc::getReflectionProperty('propOne');
    $assoc = $this->object->recoverFindAssoc(\PPHP\tests\tools\patterns\database\TestAssoc::getReflectionClass(), $reflectionKey, $essence);
    $this->assertEquals('recoverGroupFinding(PPHP\tests\tools\patterns\database\TestAssoc,['.$reflectionKey->getName().'='.$essence->getLinkOID().'])', $this->dataMapper->getCommand(0));
    $this->assertEquals($assoc->current(), $link);
  }

  /**
   * @covers PPHP\tools\classes\standard\storage\database\EssenceManager::recoverFindComponents
   */
  public function testRecoverFindComponents(){
    $essence = \PPHP\tests\tools\patterns\database\TestLongObject::getProxy(1);

    $links = new \SplObjectStorage();
    $link = \PPHP\tests\tools\patterns\database\TestAssoc::getProxy(2);
    $object = \PPHP\tests\tools\patterns\database\TestLongObject::getProxy(3);
    $link->setPropOne($object);
    $links->attach($link);

    $this->dataMapper->setReturns([$links]);

    $reflectionKey = \PPHP\tests\tools\patterns\database\TestAssoc::getReflectionProperty('propOne');
    $links = $this->object->recoverFindComponents(\PPHP\tests\tools\patterns\database\TestAssoc::getReflectionClass(), $reflectionKey, $essence, \PPHP\tests\tools\patterns\database\TestAssoc::getReflectionMethod('getPropOne'));
    $this->assertEquals('recoverGroupFinding(PPHP\tests\tools\patterns\database\TestAssoc,['.$reflectionKey->getName().'='.$essence->getLinkOID().'])', $this->dataMapper->getCommand(0));
    $this->assertEquals($links->current(), $object);
  }
}

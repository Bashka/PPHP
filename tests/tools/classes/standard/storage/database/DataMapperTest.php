<?php
namespace PPHP\tests\tools\classes\standard\storage\database;

spl_autoload_register(function($className){
  require_once $_SERVER['DOCUMENT_ROOT'] . '/' . str_replace('\\', '/', $className) . '.php';
});

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-06-23 at 07:44:07.
 */
class DataMapperTest extends \PHPUnit_Framework_TestCase{
  /**
   * Имя драйвера.
   */
  const dbDriver = 'mysql';
  /**
   * Адрес сервера с БД.
   */
  const host = 'localhost';
  /**
   * Имя БД.
   */
  const dbName = 'testingDB';
  /**
   * Пользователь БД.
   */
  const user = 'admin';
  /**
   * Пароль пользователя БД.
   */
  const password = 'admin';

  /**
   * @var \PPHP\tools\classes\standard\storage\database\PDO
   */
  static protected $PDO;

  /**
   * @var \PPHP\tools\classes\standard\storage\database\DataMapper
   */
  static protected $object;

  /**
   * @var \PPHP\tests\tools\patterns\database\TestLongObject
   */
  static protected $originator;

  /**
   * @var \PPHP\tools\classes\standard\storage\database\queryCreator\AssociationQueryCreator
   */
  static protected $queryCreator;

  /**
   * Тестовый сервис автоинкрементации.
   * @var \PPHP\tests\tools\classes\standard\storage\database\queryCreator\TestAutoinc
   */
  static protected $autoinc;

  public static function setUpBeforeClass(){
    self::$PDO = new \PPHP\tools\classes\standard\storage\database\PDO(self::dbDriver . ':host=' . self::host . ';dbname=' . self::dbName, self::user, self::password);
    self::$autoinc = \PPHP\tests\tools\classes\standard\storage\database\queryCreator\TestAutoinc::getInstance();
    self::$queryCreator = new \PPHP\tools\classes\standard\storage\database\queryCreator\AssociationQueryCreator(self::$autoinc);

    self::$object = new \PPHP\tools\classes\standard\storage\database\DataMapper();
    self::$object->setPDO(self::$PDO);
    self::$object->setQueryCreator(self::$queryCreator);

    self::$PDO->query('DELETE FROM `Assoc`');
    self::$PDO->query('DELETE FROM `ChildTable`');
    self::$PDO->query('DELETE FROM `ParentTable`');
    self::$PDO->query('INSERT INTO `Assoc` VALUES ("1", "$/PPHP/tests/tools/patterns/database/TestLongObject:1", "1", "Test")');
    self::$PDO->query('INSERT INTO `Assoc` VALUES ("2", "$/PPHP/tests/tools/patterns/database/TestLongObject:1", "2", "Test2")');
  }

  public static function tearDownAfterClass(){
    self::$PDO->query('DELETE FROM `Assoc`');
  }

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp(){
    self::$originator = new \PPHP\tests\tools\patterns\database\TestLongObject;
    self::$originator->setOID(1);
    $fourProp = new \PPHP\tests\tools\patterns\database\TestLongObject;
    $fourProp->setOID(2);
    self::$originator->setLinkProp($fourProp);

    self::$PDO->query('ALTER TABLE `ChildTable` AUTO_INCREMENT = 1');
    self::$PDO->query('ALTER TABLE `ParentTable` AUTO_INCREMENT = 1');
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown(){
    self::$PDO->query('DELETE FROM `ChildTable`');
    self::$PDO->query('DELETE FROM `ParentTable`');
  }

  /**
   * @covers PPHP\tools\classes\standard\storage\database\DataMapper::insert
   */
  public function testInsert(){
    $originator = new \PPHP\tests\tools\patterns\database\TestLongObject();
    $fourProp = new \PPHP\tests\tools\patterns\database\TestLongObject();
    $fourProp->setOID(2);
    $originator->setLinkProp($fourProp);
    self::$autoinc->generateOID();
    self::$object->insert($originator);
    $res = self::$PDO->query('SELECT * FROM `ChildTable`');
    $this->assertEquals(1, $res->rowCount());
    $this->assertEquals(['Key' => 2, 'privField' => 1, 'protField' => 2, 'linkField' => '$/PPHP/tests/tools/patterns/database/TestLongObject:2'], $res->fetch(\PDO::FETCH_ASSOC));

    $res = self::$PDO->query('SELECT * FROM `ParentTable`');
    $this->assertEquals(1, $res->rowCount());
    $this->assertEquals(['Key' => 2, 'parentProtField' => 2, 'parentPublField' => 3], $res->fetch(\PDO::FETCH_ASSOC));
    //
  }

  /**
   * @covers PPHP\tools\classes\standard\storage\database\DataMapper::update
   */
  public function testUpdate(){
    self::$PDO->query('INSERT INTO `ChildTable` VALUES(1, 3, 4, "$/PPHP/tests/tools/patterns/database/TestLongObject:3")');
    self::$PDO->query('INSERT INTO `ParentTable` VALUES(1, 5, 6)');

    self::$object->update(self::$originator);

    $res = self::$PDO->query('SELECT * FROM `ChildTable`');
    $this->assertEquals(['Key' => 1, 'privField' => 1, 'protField' => 2, 'linkField' => '$/PPHP/tests/tools/patterns/database/TestLongObject:2'], $res->fetch(\PDO::FETCH_ASSOC));
    $res = self::$PDO->query('SELECT * FROM `ParentTable`');
    $this->assertEquals(['Key' => 1, 'parentProtField' => 2, 'parentPublField' => 3], $res->fetch(\PDO::FETCH_ASSOC));
  }

  /**
   * @covers PPHP\tools\classes\standard\storage\database\DataMapper::delete
   */
  public function testDelete(){
    self::$PDO->query('INSERT INTO `ChildTable` VALUES(1, 1, 2, "$/PPHP/tests/tools/patterns/database/TestLongObject:2")');
    self::$PDO->query('INSERT INTO `ParentTable` VALUES(1, 2, 3)');

    self::$object->delete(self::$originator);
    $this->assertEquals(0, self::$PDO->query('SELECT * FROM `ChildTable`')->rowCount());
    $this->assertEquals(0, self::$PDO->query('SELECT * FROM `ParentTable`')->rowCount());
  }

  /**
   * @covers PPHP\tools\classes\standard\storage\database\DataMapper::recover
   * @covers PPHP\tools\classes\standard\storage\database\DataMapper::recoverObject
   */
  public function testRecover(){
    self::$PDO->query('INSERT INTO `ChildTable` VALUES(1, 1, 2, "$/PPHP/tests/tools/patterns/database/TestLongObject:2")');
    self::$PDO->query('INSERT INTO `ParentTable` VALUES(1, 2, 3)');

    self::$object->recover(self::$originator);

    $this->assertEquals(1, self::$originator->getOID());
    $this->assertEquals(1, self::$originator->getPrivProp());
    $this->assertEquals(2, self::$originator->getProtProp());
    $this->assertInstanceOf('\PPHP\tests\tools\patterns\database\TestLongObject', self::$originator->getLinkProp());
    $this->assertEquals(2, self::$originator->getLinkProp()->getOID());
    $this->assertInstanceOf('\PPHP\tools\patterns\database\associations\LongAssociation', self::$originator->getPublProp());
    return self::$originator->getPublProp();
  }

  /**
   * @covers PPHP\tools\classes\standard\storage\database\DataMapper::recoverFinding
   */
  public function testRecoverFinding(){
    self::$PDO->query('INSERT INTO `ChildTable` VALUES(1, 1, 2, "$/PPHP/tests/tools/patterns/database/TestLongObject:2")');
    self::$PDO->query('INSERT INTO `ParentTable` VALUES(1, 2, 3)');

    self::$object->recoverFinding(self::$originator, ['privProp' => 1, 'linkProp' => \PPHP\tests\tools\patterns\database\TestLongObject::getProxy(2)]);

    $this->assertEquals(1, self::$originator->getOID());
    $this->assertEquals(1, self::$originator->getPrivProp());
    $this->assertInstanceOf('\PPHP\tests\tools\patterns\database\TestLongObject', self::$originator->getLinkProp());
    $this->assertEquals(2, self::$originator->getLinkProp()->getOID());
  }

  /**
   * @covers PPHP\tools\classes\standard\storage\database\DataMapper::recoverGroupFinding
   */
  public function testRecoverGroupFinding(){
    self::$PDO->query('INSERT INTO `ChildTable` VALUES(1, 1, 2, "$/PPHP/tests/tools/patterns/database/TestLongObject:2")');
    self::$PDO->query('INSERT INTO `ParentTable` VALUES(1, 2, 3)');

    $resultStorage = self::$object->recoverGroupFinding(\PPHP\tests\tools\patterns\database\TestLongObject::getReflectionClass(), ['privProp' => 1]);

    $this->assertEquals(1, $resultStorage->count());
    $resultStorage->rewind();
    $recoverObject = $resultStorage->current();
    $this->assertInstanceOf('\PPHP\tests\tools\patterns\database\TestLongObject', $recoverObject);
    $this->assertEquals(2, $recoverObject->getProtProp());
  }


  /**
   * @covers \PPHP\tools\classes\standard\storage\database\DataMapper::recoverAssoc
   * @depends testRecover
   * @param \PPHP\tools\patterns\database\associations\LongAssociation $longAssoc
   */
  public function testRecoverAssoc(\PPHP\tools\patterns\database\associations\LongAssociation $longAssoc){
    self::$object->recoverAssoc($longAssoc);
    $this->assertEquals(2, $longAssoc->count());
    $longAssoc->rewind();
    $assocObject = $longAssoc->current();
    $this->assertInstanceOf('\PPHP\tests\tools\patterns\database\TestAssoc', $assocObject);
    $this->assertEquals(1, $assocObject->getPropOne());
  }
}

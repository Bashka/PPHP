<?php
namespace PPHP\tests\tools\patterns\metadata;

spl_autoload_register(function($className){
  require_once $_SERVER['DOCUMENT_ROOT'] . '/' . str_replace('\\', '/', $className) . '.php';
});

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-06-27 at 06:33:41.
 */
class MetadataManagerTest extends \PHPUnit_Framework_TestCase{
  /**
   * @var \PPHP\tools\patterns\metadata\MetadataManager
   */
  static protected $object;
  /**
   * @var \PPHP\tools\patterns\metadata\MetadataManager
   */
  static protected $parentObject;

  /**
   * @var \PPHP\tests\tools\patterns\metadata\TestReflect
   */
  static protected $reflect;
  /**
   * @var \PPHP\tests\tools\patterns\metadata\TestReflect
   */
  static protected $parentReflect;

  public static function setUpBeforeClass(){
    self::$reflect = new TestReflect();
    self::$object = new \PPHP\tools\patterns\metadata\MetadataManager(get_class(self::$reflect));

    self::$parentReflect = new TestParentReflect();
    self::$parentObject = new \PPHP\tools\patterns\metadata\MetadataManager(get_class(self::$parentReflect));
  }

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp(){
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown(){
  }

  /**
   * @covers PPHP\tools\patterns\metadata\MetadataManager::getReflectionProperty
   * @covers PPHP\tools\patterns\metadata\MetadataManager::getReflectionPropertyClass
   */
  public function testGetReflectionProperty(){
    $reflectionProperty = self::$object->getReflectionProperty('prop');
    $this->assertInstanceOf('\ReflectionProperty', $reflectionProperty);
    $this->assertInstanceOf('\PPHP\tools\patterns\metadata\Described', $reflectionProperty);

    $reflectionProperty = self::$object->getReflectionProperty('parentProp');
    $this->assertInstanceOf('\ReflectionProperty', $reflectionProperty);
    $this->assertEquals('PPHP\tests\tools\patterns\metadata\TestParentReflect', $reflectionProperty->getDeclaringClass()->getName());
  }

  /**
   * @covers PPHP\tools\patterns\metadata\MetadataManager::getReflectionMethod
   * @covers PPHP\tools\patterns\metadata\MetadataManager::getReflectionMethodClass
   */
  public function testGetReflectionMethod(){
    $reflectionMethod = self::$object->getReflectionMethod('method');
    $this->assertInstanceOf('\ReflectionMethod', $reflectionMethod);
    $this->assertInstanceOf('\PPHP\tools\patterns\metadata\Described', $reflectionMethod);

    $reflectionMethod = self::$object->getReflectionMethod('method2');
    $this->assertInstanceOf('\ReflectionMethod', $reflectionMethod);
    $this->assertEquals('PPHP\tests\tools\patterns\metadata\TestParentReflect', $reflectionMethod->getDeclaringClass()->getName());
  }

  /**
   * @covers PPHP\tools\patterns\metadata\MetadataManager::getReflectionClass
   * @covers PPHP\tools\patterns\metadata\MetadataManager::getReflectionClassClass
   */
  public function testGetReflectionClass(){
    $reflectionClass = self::$object->getReflectionClass();
    $this->assertInstanceOf('\ReflectionClass', $reflectionClass);
    $this->assertInstanceOf('\PPHP\tools\patterns\metadata\Described', $reflectionClass);
  }

  /**
   * @covers PPHP\tools\patterns\metadata\MetadataManager::getAllReflectionProperties
   * @covers PPHP\tools\patterns\metadata\MetadataManager::getAllReflectionPropertiesClass
   */
  public function testGetAllReflectionProperties(){
    $this->assertEquals(7, self::$object->getAllReflectionProperties()->count());
    $this->assertEquals(5, self::$parentObject->getAllReflectionProperties()->count());
  }

  /**
   * @covers PPHP\tools\patterns\metadata\MetadataManager::getAllReflectionMethods
   * @covers PPHP\tools\patterns\metadata\MetadataManager::getAllReflectionMethodsClass
   */
  public function testGetAllReflectionMethods(){
    $this->assertEquals(9, self::$object->getAllReflectionMethods()->count());
    $this->assertEquals(8, self::$parentObject->getAllReflectionMethods()->count());
  }

  /**
   * @covers PPHP\tools\patterns\metadata\MetadataManager::setMetadataProperty
   * @covers PPHP\tools\patterns\metadata\MetadataManager::setMetadataPropertyClass
   */
  public function testSetMetadataProperty(){
    self::$object->setMetadataProperty('prop', 'TestMetadata', 'Test');
    $this->assertEquals('Test', self::$object->getReflectionProperty('prop')->getMetadata('TestMetadata'));
    self::$reflect->getReflectionProperty('prop')->removeMetadata('TestMetadata');
  }

  /**
   * @covers PPHP\tools\patterns\metadata\MetadataManager::setMetadataMethod
   * @covers PPHP\tools\patterns\metadata\MetadataManager::setMetadataMethodClass
   */
  public function testSetMetadataMethod(){
    self::$object->setMetadataMethod('method', 'TestMetadata', 'Test');
    $this->assertEquals('Test', self::$object->getReflectionMethod('method')->getMetadata('TestMetadata'));
    self::$reflect->getReflectionMethod('method')->removeMetadata('TestMetadata');
  }

  /**
   * @covers PPHP\tools\patterns\metadata\MetadataManager::setMetadataClass
   * @covers PPHP\tools\patterns\metadata\MetadataManager::setMetadataClassClass
   */
  public function testSetMetadataClass(){
    self::$object->setMetadataClass('TestMetadata', 'Test');
    $this->assertEquals('Test', self::$object->getReflectionClass()->getMetadata('TestMetadata'));
    self::$reflect->getReflectionClass()->removeMetadata('TestMetadata');
  }

  /**
   * @covers PPHP\tools\patterns\metadata\MetadataManager::getMetadataProperty
   * @covers PPHP\tools\patterns\metadata\MetadataManager::getMetadataPropertyClass
   */
  public function testGetMetadataProperty(){
    $this->assertEquals('Test', self::$object->getMetadataProperty('prop', 'Metadata'));
  }

  /**
   * @covers PPHP\tools\patterns\metadata\MetadataManager::getMetadataMethod
   * @covers PPHP\tools\patterns\metadata\MetadataManager::getMetadataMethodClass
   */
  public function testGetMetadataMethod(){
    $this->assertEquals('Test', self::$object->getMetadataMethod('method', 'Metadata'));
  }

  /**
   * @covers PPHP\tools\patterns\metadata\MetadataManager::getMetadataClass
   * @covers PPHP\tools\patterns\metadata\MetadataManager::getMetadataClassClass
   */
  public function testGetMetadataClass(){
    $this->assertEquals('Test', self::$object->getMetadataClass('Metadata'));
  }

  /**
   * @covers PPHP\tools\patterns\metadata\MetadataManager::removeMetadataProperty
   * @covers PPHP\tools\patterns\metadata\MetadataManager::removeMetadataPropertyClass
   */
  public function testRemoveMetadataProperty(){
    self::$object->removeMetadataProperty('prop', 'Metadata');
    $this->assertFalse(self::$reflect->getReflectionProperty('prop')->isMetadataExists('Metadata'));
    self::$object->setMetadataProperty('prop', 'Metadata', 'Test');
  }

  /**
   * @covers PPHP\tools\patterns\metadata\MetadataManager::removeMetadataMethod
   * @covers PPHP\tools\patterns\metadata\MetadataManager::removeMetadataMethodClass
   */
  public function testRemoveMetadataMethod(){
    self::$object->removeMetadataMethod('method', 'Metadata');
    $this->assertFalse(self::$reflect->getReflectionMethod('method')->isMetadataExists('Metadata'));
    self::$object->setMetadataMethod('method', 'Metadata', 'Test');
  }

  /**
   * @covers PPHP\tools\patterns\metadata\MetadataManager::getAllReflectionPropertiesWithMetadata
   * @covers PPHP\tools\patterns\metadata\MetadataManager::getAllReflectionPropertiesWithMetadataClass
   * @covers PPHP\tools\patterns\metadata\MetadataManager::filterAndMetadata
   */
  public function testGetAllReflectionPropertiesWithMetadata(){
    $reflects = self::$object->getAllReflectionPropertiesWithMetadata('Metadata');
    $metadataExists = true;
    foreach($reflects as $reflect){
      if(!$reflect->isMetadataExists('Metadata')){
        $metadataExists = false;
      }
    }
    $this->assertTrue($metadataExists);
    $this->assertEquals(3, $reflects->count());
  }

  /**
   * @covers PPHP\tools\patterns\metadata\MetadataManager::getAllReflectionMethodsWithMetadata
   * @covers PPHP\tools\patterns\metadata\MetadataManager::getAllReflectionMethodsWithMetadataClass
   */
  public function testGetAllReflectionMethodsWithMetadata(){
    $reflects = self::$object->getAllReflectionMethodsWithMetadata('Metadata');
    $metadataExists = true;
    foreach($reflects as $reflect){
      if(!$reflect->isMetadataExists('Metadata')){
        $metadataExists = false;
      }
    }
    $this->assertTrue($metadataExists);
    $this->assertEquals(2, $reflects->count());
  }
}

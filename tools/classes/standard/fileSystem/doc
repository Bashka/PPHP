h1: Терминология
- Компонент файловой системы - средство, позволяющее сохранять данные на постоянном носителе в виде именнованного файла или средство группировки файлов в виде каталога;
- Блокировка файла - механизм контролирующий доступ к файлу;
- Исключительная блокировка - запрет на доступ к файлу всем потокам, за исключением блокирующего;
- Выборочная блокировка - запрет на доступ к файлу потокам ввода.

h1: Программное представление компонентов файловой системы
Для взаимодействия с компонентами файловой системы используются средства, реализованные в данном пакете. Они делятся на два основных класса:
- Файл (класс File) - экземпляры данного класса представляют файлы в файловой системе;
- Каталог (класс Directory) - экземпляры данного класса представляют каталоги в файловой системе.
Так как оба класса имеют много общих черт, таких как имя, возможность перемещения между каталогами, возможность удаления и создания, классы наследуют поведение от корневого родительского класса ComponentFileSystem, который объединяет общие свойства всех компонентов файловой системы.
img: ComponentFileSystem.png
Для контроля связей между компонентами файловой системы, каждый экземпляр этих классов должен относится к некоторому каталогу, который указывается при создании экземпляра или определяется автоматически относительно корня системы:
code: php 40
$file = new File('PPHP/tests/tools/classes/standard/fileSystem/file'); // Получение представления файла по указанному адресу относительно корня системы.
$dir = new Directory('PPHP/tests/tools/classes/standard/fileSystem/dir'); // Получение представления каталога по указанному адресу относительно корня системы.
code: end
Следует отметить, что конструктор классов File и Directory принимает в качестве аргумента либо адрем компонента относительно корня системы Delphinum, либо имя компонента и хранящий его каталог в качестве второго аргумента.

h1: Работа с каталогами
Для управления каталогами в файловой системе используется класс Directory. Рассмотрим пример использования данного класса:
code: php 140
$dir = new Directory('PPHP/tests/tools/classes/standard/fileSystem/newDir');
// Проверка на существование каталога.
if(!$dir->isExists()){
  $dir->create(); // Создание каталога, если он не существует.
}
$dir->rename('dir'); // Переименование.
echo $dir->getSize(); // Получение суммарного объема памяти, занимаемого всем содержимым каталога.
echo $dir->getName(); // Получение имени каталога.
$dir->delete(); // Рекурсивное удаление каталога.
code: end
В примере представлены далеко не все возможности класса Directory (за подробностями обращайтесь к документации по API класса), но заметно, как просто можно взаимодействовать с каталогом.

h2: Корневой каталог
Так как каждый компонент файловой системы представляется в данном пакете в виде имени и связи с родительским каталогом, необходим класс, представляющий корневой каталог. В этой роли выступает экземпляр класса RootDirectory. Данный класс имеет следующие свойства:
- Его конструктор не принимает аргументов;
- Его адрес и адрес родительского каталога равен адресу корня системы;
- Переименовать, переместить, создать или скопировать его нельзя;
- Его размер всегда равен 0;
- Он всегда существует.
Надобности в программном создании экземпляров данного класса нет, так как они создаются автоматически системой в процессе работы с компонентами, но программисту иногда приходится работать с этими объектами, потому следует следить за тем, с каталогом какого класса производится манипуляция.

h1: Работа с файлами
Для управления файлами в файловой системе используется класс File. Рассмотрим пример использования данного класса:
code: php 180
$file = new File('PPHP/tests/tools/classes/standard/fileSystem/newFile');
// Проверка на существование файла.
if(!$file->isExists()){
  $file->create(); // Создание файла, если он не существует.
}
$file->rename('file'); // Переименование.
echo $file->getSize(); // Получение суммарного объема памяти, занимаемого файлом.
echo $file->getName(); // Получение имени файла.
$ws = $file->getWriter(); // Получение потока вывода в файл.
$ws->write('Hello world'); // Запись в файл.
$ws->close(); // Закрытие потока вывода.
$file->delete(); // Удаление файла.
code: end
В примере представлены далеко не все возможности класса File (за подробностями обращайтесь к документации по API класса). Описание принципов работы с файлавыми потоками ввода/вывода представлено в пакете PPHP/tools/classes/standard/fileSystem/io.

h2: Блокировка
Класс File имеет встроеный механизм блокировки файла выборочной и исключительной блокировкой. Блокировка выполняется при получении потока ввода (getReader) или потока вывода (getWriter) и снимается при закрытии этих потоков, потому следует следить за своевременным закрытием полученных потоков.
code: php 100
$file = new File('PPHP/tests/tools/classes/standard/fileSystem/file');
$ws = $file->getWriter(); // Получение потока вывода в файл.
// Файл заблокирован исключительной блокировкой.
$ws->write('Hello world'); // Запись в файл.
$ws->close(); // Закрытие потока вывода.
// Файл разблокирован.
code: end
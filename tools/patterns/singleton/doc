h1: Терминология
- Инстанциация - создание и инициализация экземпляра объекта;
- Класс-одиночка - класс, который может быть инстанциирован только один раз.

h1: Классы как объекты
Некоторые классы содержат такую логику, что отпадает необходимость в создании более одного экземпляра такого класса. Обычно это классы служб системы или фабрики.
Когда необходимо определить класс, который возможно инстанциировать только один раз, а последующие попытки создания объектов этого класса должны возвращать созданный при первой инстанциации объект, используется интерфейс Singleton. Данный интерфейс определяет единственный метод getInstance, который создает объект класса при первом обращении и возвращает его при последующих и требует запретить возможность программной инстанциации класса (конструктор и метод __clone).
TSingleton полностью реализует данный интерфейс и может быть использован в классах-одиночках. В качестве примера реализуем такой класс:
code: php 100
class A implements Singleton{
use TSingleton;
  ...
}

$o = A::getInstance(); // Инстанциация.
echo $o === A:getInstance(); // true
code: end
Как можно заметить, последующее обращение к методу getInstance класса-одиночки возвращает созданный при первом обращении объект.

h1: Классы-службы
Как правило классы-одиночки часто встречаются на уровне services системы. Это объясняется тем, что природа системных служб позволяет использовать единственный экземпляр класса для работы. Стоит так же отметить, что класс-одиночка предоставляет глобальный доступ к своему экземпляру, что очень важно для системных служб.
В качестве примера рассмотрим службу log:
code: php 50
use \PPHP\services\log as log;
$l = log\LogManager::getInstance(); // Получение службы.
$l->setMessage(log\Message::createError('Сообщение об ошибке.')); // Использование службы.
code: end
В примере видно, что использование более чем одного объекта службы журнализации не имеет смысла, а доступ к ней может потребоваться любому объекту системы.